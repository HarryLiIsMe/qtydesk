// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Exchange.proto

#include "Exchange.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace BigPack {
constexpr Exchange::Exchange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resourceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , targetid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , datatype_(0)

  , _oneof_case_{}{}
struct ExchangeDefaultTypeInternal {
  constexpr ExchangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExchangeDefaultTypeInternal() {}
  union {
    Exchange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExchangeDefaultTypeInternal _Exchange_default_instance_;
constexpr WMHeartbeat::WMHeartbeat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WMHeartbeatDefaultTypeInternal {
  constexpr WMHeartbeatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WMHeartbeatDefaultTypeInternal() {}
  union {
    WMHeartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WMHeartbeatDefaultTypeInternal _WMHeartbeat_default_instance_;
constexpr CsRegisterHost::CsRegisterHost(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cpuid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uniqueid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0){}
struct CsRegisterHostDefaultTypeInternal {
  constexpr CsRegisterHostDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CsRegisterHostDefaultTypeInternal() {}
  union {
    CsRegisterHost _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CsRegisterHostDefaultTypeInternal _CsRegisterHost_default_instance_;
constexpr ScReplyRegister::ScReplyRegister(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : registerid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct ScReplyRegisterDefaultTypeInternal {
  constexpr ScReplyRegisterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScReplyRegisterDefaultTypeInternal() {}
  union {
    ScReplyRegister _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScReplyRegisterDefaultTypeInternal _ScReplyRegister_default_instance_;
constexpr CsQueryHost::CsQueryHost(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CsQueryHostDefaultTypeInternal {
  constexpr CsQueryHostDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CsQueryHostDefaultTypeInternal() {}
  union {
    CsQueryHost _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CsQueryHostDefaultTypeInternal _CsQueryHost_default_instance_;
constexpr ScReplyQuery::ScReplyQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : querymessage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ifexithost_(false){}
struct ScReplyQueryDefaultTypeInternal {
  constexpr ScReplyQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScReplyQueryDefaultTypeInternal() {}
  union {
    ScReplyQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScReplyQueryDefaultTypeInternal _ScReplyQuery_default_instance_;
constexpr CCRequestAuth::CCRequestAuth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : authpass_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCRequestAuthDefaultTypeInternal {
  constexpr CCRequestAuthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCRequestAuthDefaultTypeInternal() {}
  union {
    CCRequestAuth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCRequestAuthDefaultTypeInternal _CCRequestAuth_default_instance_;
constexpr CCResponseAuth::CCResponseAuth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct CCResponseAuthDefaultTypeInternal {
  constexpr CCResponseAuthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCResponseAuthDefaultTypeInternal() {}
  union {
    CCResponseAuth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCResponseAuthDefaultTypeInternal _CCResponseAuth_default_instance_;
constexpr CCGetDesktop::CCGetDesktop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CCGetDesktopDefaultTypeInternal {
  constexpr CCGetDesktopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCGetDesktopDefaultTypeInternal() {}
  union {
    CCGetDesktop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCGetDesktopDefaultTypeInternal _CCGetDesktop_default_instance_;
constexpr CCGiveImgParameters::CCGiveImgParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_(0)
  , height_(0)
  , rectwidth_(0){}
struct CCGiveImgParametersDefaultTypeInternal {
  constexpr CCGiveImgParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCGiveImgParametersDefaultTypeInternal() {}
  union {
    CCGiveImgParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCGiveImgParametersDefaultTypeInternal _CCGiveImgParameters_default_instance_;
constexpr CCGiveImg::CCGiveImg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imgdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , posx_(0)
  , posy_(0)
  , tilenum_(0){}
struct CCGiveImgDefaultTypeInternal {
  constexpr CCGiveImgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCGiveImgDefaultTypeInternal() {}
  union {
    CCGiveImg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCGiveImgDefaultTypeInternal _CCGiveImg_default_instance_;
constexpr APTileReceived::APTileReceived(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tilenum_(0){}
struct APTileReceivedDefaultTypeInternal {
  constexpr APTileReceivedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~APTileReceivedDefaultTypeInternal() {}
  union {
    APTileReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT APTileReceivedDefaultTypeInternal _APTileReceived_default_instance_;
constexpr APMouseMove::APMouseMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pointx_(0)
  , pointy_(0){}
struct APMouseMoveDefaultTypeInternal {
  constexpr APMouseMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~APMouseMoveDefaultTypeInternal() {}
  union {
    APMouseMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT APMouseMoveDefaultTypeInternal _APMouseMove_default_instance_;
}  // namespace BigPack
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Exchange_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Exchange_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Exchange_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Exchange_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::Exchange, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::BigPack::Exchange, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BigPack::Exchange, datatype_),
  PROTOBUF_FIELD_OFFSET(::BigPack::Exchange, resourceid_),
  PROTOBUF_FIELD_OFFSET(::BigPack::Exchange, targetid_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::BigPack::Exchange, dataBody_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::WMHeartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::CsRegisterHost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BigPack::CsRegisterHost, cpuid_),
  PROTOBUF_FIELD_OFFSET(::BigPack::CsRegisterHost, deviceid_),
  PROTOBUF_FIELD_OFFSET(::BigPack::CsRegisterHost, mac_),
  PROTOBUF_FIELD_OFFSET(::BigPack::CsRegisterHost, uniqueid_),
  PROTOBUF_FIELD_OFFSET(::BigPack::CsRegisterHost, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::ScReplyRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BigPack::ScReplyRegister, success_),
  PROTOBUF_FIELD_OFFSET(::BigPack::ScReplyRegister, registerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::CsQueryHost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::ScReplyQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BigPack::ScReplyQuery, ifexithost_),
  PROTOBUF_FIELD_OFFSET(::BigPack::ScReplyQuery, querymessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::CCRequestAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BigPack::CCRequestAuth, authpass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::CCResponseAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BigPack::CCResponseAuth, success_),
  PROTOBUF_FIELD_OFFSET(::BigPack::CCResponseAuth, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::CCGetDesktop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::CCGiveImgParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BigPack::CCGiveImgParameters, width_),
  PROTOBUF_FIELD_OFFSET(::BigPack::CCGiveImgParameters, height_),
  PROTOBUF_FIELD_OFFSET(::BigPack::CCGiveImgParameters, rectwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::CCGiveImg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BigPack::CCGiveImg, posx_),
  PROTOBUF_FIELD_OFFSET(::BigPack::CCGiveImg, posy_),
  PROTOBUF_FIELD_OFFSET(::BigPack::CCGiveImg, tilenum_),
  PROTOBUF_FIELD_OFFSET(::BigPack::CCGiveImg, imgdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::APTileReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BigPack::APTileReceived, tilenum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BigPack::APMouseMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BigPack::APMouseMove, pointx_),
  PROTOBUF_FIELD_OFFSET(::BigPack::APMouseMove, pointy_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::BigPack::Exchange)},
  { 20, -1, sizeof(::BigPack::WMHeartbeat)},
  { 25, -1, sizeof(::BigPack::CsRegisterHost)},
  { 35, -1, sizeof(::BigPack::ScReplyRegister)},
  { 42, -1, sizeof(::BigPack::CsQueryHost)},
  { 47, -1, sizeof(::BigPack::ScReplyQuery)},
  { 54, -1, sizeof(::BigPack::CCRequestAuth)},
  { 60, -1, sizeof(::BigPack::CCResponseAuth)},
  { 67, -1, sizeof(::BigPack::CCGetDesktop)},
  { 72, -1, sizeof(::BigPack::CCGiveImgParameters)},
  { 80, -1, sizeof(::BigPack::CCGiveImg)},
  { 89, -1, sizeof(::BigPack::APTileReceived)},
  { 95, -1, sizeof(::BigPack::APMouseMove)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_Exchange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_WMHeartbeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_CsRegisterHost_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_ScReplyRegister_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_CsQueryHost_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_ScReplyQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_CCRequestAuth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_CCResponseAuth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_CCGetDesktop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_CCGiveImgParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_CCGiveImg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_APTileReceived_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BigPack::_APMouseMove_default_instance_),
};

const char descriptor_table_protodef_Exchange_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Exchange.proto\022\007BigPack\"\272\006\n\010Exchange\022,"
  "\n\010dataType\030\001 \001(\0162\032.BigPack.Exchange.Data"
  "Type\022\022\n\nresourceID\030\002 \001(\t\022\020\n\010targetID\030\003 \001"
  "(\t\022+\n\010hostInfo\030\004 \001(\0132\027.BigPack.CsRegiste"
  "rHostH\000\022-\n\treplyInfo\030\005 \001(\0132\030.BigPack.ScR"
  "eplyRegisterH\000\022)\n\tqueryHost\030\006 \001(\0132\024.BigP"
  "ack.CsQueryHostH\000\022+\n\nreplyQuery\030\007 \001(\0132\025."
  "BigPack.ScReplyQueryH\000\022-\n\013requestAuth\030\010 "
  "\001(\0132\026.BigPack.CCRequestAuthH\000\022/\n\014respons"
  "eAuth\030\t \001(\0132\027.BigPack.CCResponseAuthH\000\022+"
  "\n\ngetDesktop\030\n \001(\0132\025.BigPack.CCGetDeskto"
  "pH\000\0225\n\rimgParameters\030\013 \001(\0132\034.BigPack.CCG"
  "iveImgParametersH\000\022!\n\003img\030\014 \001(\0132\022.BigPac"
  "k.CCGiveImgH\000\022/\n\014tileReceived\030\r \001(\0132\027.Bi"
  "gPack.APTileReceivedH\000\022)\n\tmouseMove\030\016 \001("
  "\0132\024.BigPack.APMouseMoveH\000\"\326\001\n\010DataType\022\r"
  "\n\tHEARTBEAT\020\000\022\014\n\010REGISTER\020\001\022\022\n\016REPLY_REG"
  "ISTER\020\002\022\016\n\nQUERY_HOST\020\003\022\017\n\013REPLY_QUERY\020\004"
  "\022\020\n\014REQUEST_AUTH\020\005\022\021\n\rRESPONSE_AUTH\020\006\022\017\n"
  "\013GET_DESKTOP\020\007\022\021\n\rGIVE_IMG_PARA\020\010\022\014\n\010GIV"
  "E_IMG\020\t\022\021\n\rTILE_RECEIVED\020\n\022\016\n\nMOUSE_MOVE"
  "\020\013B\n\n\010dataBody\"\r\n\013WMHeartbeat\"^\n\016CsRegis"
  "terHost\022\r\n\005cpuID\030\001 \001(\t\022\020\n\010deviceID\030\002 \001(\t"
  "\022\013\n\003mac\030\003 \001(\t\022\020\n\010uniqueID\030\004 \001(\t\022\014\n\004type\030"
  "\005 \001(\005\"6\n\017ScReplyRegister\022\017\n\007success\030\001 \001("
  "\010\022\022\n\nregisterId\030\002 \001(\t\"\r\n\013CsQueryHost\"8\n\014"
  "ScReplyQuery\022\022\n\nifExitHost\030\001 \001(\010\022\024\n\014quer"
  "yMessage\030\002 \001(\t\"!\n\rCCRequestAuth\022\020\n\010authP"
  "ass\030\001 \001(\t\"/\n\016CCResponseAuth\022\017\n\007success\030\001"
  " \001(\010\022\014\n\004info\030\002 \001(\t\"\016\n\014CCGetDesktop\"G\n\023CC"
  "GiveImgParameters\022\r\n\005width\030\001 \001(\005\022\016\n\006heig"
  "ht\030\002 \001(\005\022\021\n\trectWidth\030\003 \001(\005\"I\n\tCCGiveImg"
  "\022\014\n\004posX\030\001 \001(\005\022\014\n\004posY\030\002 \001(\005\022\017\n\007tileNum\030"
  "\003 \001(\005\022\017\n\007imgData\030\004 \001(\014\"!\n\016APTileReceived"
  "\022\017\n\007tileNum\030\001 \001(\005\"-\n\013APMouseMove\022\016\n\006poin"
  "tX\030\001 \001(\005\022\016\n\006pointY\030\002 \001(\005B%\n\030com.javacgo."
  "qty.protocolB\007BigPackH\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Exchange_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Exchange_2eproto = {
  false, false, 1471, descriptor_table_protodef_Exchange_2eproto, "Exchange.proto", 
  &descriptor_table_Exchange_2eproto_once, nullptr, 0, 13,
  schemas, file_default_instances, TableStruct_Exchange_2eproto::offsets,
  file_level_metadata_Exchange_2eproto, file_level_enum_descriptors_Exchange_2eproto, file_level_service_descriptors_Exchange_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Exchange_2eproto_getter() {
  return &descriptor_table_Exchange_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Exchange_2eproto(&descriptor_table_Exchange_2eproto);
namespace BigPack {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Exchange_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Exchange_2eproto);
  return file_level_enum_descriptors_Exchange_2eproto[0];
}
bool Exchange_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Exchange_DataType Exchange::HEARTBEAT;
constexpr Exchange_DataType Exchange::REGISTER;
constexpr Exchange_DataType Exchange::REPLY_REGISTER;
constexpr Exchange_DataType Exchange::QUERY_HOST;
constexpr Exchange_DataType Exchange::REPLY_QUERY;
constexpr Exchange_DataType Exchange::REQUEST_AUTH;
constexpr Exchange_DataType Exchange::RESPONSE_AUTH;
constexpr Exchange_DataType Exchange::GET_DESKTOP;
constexpr Exchange_DataType Exchange::GIVE_IMG_PARA;
constexpr Exchange_DataType Exchange::GIVE_IMG;
constexpr Exchange_DataType Exchange::TILE_RECEIVED;
constexpr Exchange_DataType Exchange::MOUSE_MOVE;
constexpr Exchange_DataType Exchange::DataType_MIN;
constexpr Exchange_DataType Exchange::DataType_MAX;
constexpr int Exchange::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Exchange::_Internal {
 public:
  static const ::BigPack::CsRegisterHost& hostinfo(const Exchange* msg);
  static const ::BigPack::ScReplyRegister& replyinfo(const Exchange* msg);
  static const ::BigPack::CsQueryHost& queryhost(const Exchange* msg);
  static const ::BigPack::ScReplyQuery& replyquery(const Exchange* msg);
  static const ::BigPack::CCRequestAuth& requestauth(const Exchange* msg);
  static const ::BigPack::CCResponseAuth& responseauth(const Exchange* msg);
  static const ::BigPack::CCGetDesktop& getdesktop(const Exchange* msg);
  static const ::BigPack::CCGiveImgParameters& imgparameters(const Exchange* msg);
  static const ::BigPack::CCGiveImg& img(const Exchange* msg);
  static const ::BigPack::APTileReceived& tilereceived(const Exchange* msg);
  static const ::BigPack::APMouseMove& mousemove(const Exchange* msg);
};

const ::BigPack::CsRegisterHost&
Exchange::_Internal::hostinfo(const Exchange* msg) {
  return *msg->dataBody_.hostinfo_;
}
const ::BigPack::ScReplyRegister&
Exchange::_Internal::replyinfo(const Exchange* msg) {
  return *msg->dataBody_.replyinfo_;
}
const ::BigPack::CsQueryHost&
Exchange::_Internal::queryhost(const Exchange* msg) {
  return *msg->dataBody_.queryhost_;
}
const ::BigPack::ScReplyQuery&
Exchange::_Internal::replyquery(const Exchange* msg) {
  return *msg->dataBody_.replyquery_;
}
const ::BigPack::CCRequestAuth&
Exchange::_Internal::requestauth(const Exchange* msg) {
  return *msg->dataBody_.requestauth_;
}
const ::BigPack::CCResponseAuth&
Exchange::_Internal::responseauth(const Exchange* msg) {
  return *msg->dataBody_.responseauth_;
}
const ::BigPack::CCGetDesktop&
Exchange::_Internal::getdesktop(const Exchange* msg) {
  return *msg->dataBody_.getdesktop_;
}
const ::BigPack::CCGiveImgParameters&
Exchange::_Internal::imgparameters(const Exchange* msg) {
  return *msg->dataBody_.imgparameters_;
}
const ::BigPack::CCGiveImg&
Exchange::_Internal::img(const Exchange* msg) {
  return *msg->dataBody_.img_;
}
const ::BigPack::APTileReceived&
Exchange::_Internal::tilereceived(const Exchange* msg) {
  return *msg->dataBody_.tilereceived_;
}
const ::BigPack::APMouseMove&
Exchange::_Internal::mousemove(const Exchange* msg) {
  return *msg->dataBody_.mousemove_;
}
void Exchange::set_allocated_hostinfo(::BigPack::CsRegisterHost* hostinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_dataBody();
  if (hostinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hostinfo);
    if (message_arena != submessage_arena) {
      hostinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hostinfo, submessage_arena);
    }
    set_has_hostinfo();
    dataBody_.hostinfo_ = hostinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.hostInfo)
}
void Exchange::set_allocated_replyinfo(::BigPack::ScReplyRegister* replyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_dataBody();
  if (replyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(replyinfo);
    if (message_arena != submessage_arena) {
      replyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replyinfo, submessage_arena);
    }
    set_has_replyinfo();
    dataBody_.replyinfo_ = replyinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.replyInfo)
}
void Exchange::set_allocated_queryhost(::BigPack::CsQueryHost* queryhost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_dataBody();
  if (queryhost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(queryhost);
    if (message_arena != submessage_arena) {
      queryhost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queryhost, submessage_arena);
    }
    set_has_queryhost();
    dataBody_.queryhost_ = queryhost;
  }
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.queryHost)
}
void Exchange::set_allocated_replyquery(::BigPack::ScReplyQuery* replyquery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_dataBody();
  if (replyquery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(replyquery);
    if (message_arena != submessage_arena) {
      replyquery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replyquery, submessage_arena);
    }
    set_has_replyquery();
    dataBody_.replyquery_ = replyquery;
  }
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.replyQuery)
}
void Exchange::set_allocated_requestauth(::BigPack::CCRequestAuth* requestauth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_dataBody();
  if (requestauth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestauth);
    if (message_arena != submessage_arena) {
      requestauth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestauth, submessage_arena);
    }
    set_has_requestauth();
    dataBody_.requestauth_ = requestauth;
  }
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.requestAuth)
}
void Exchange::set_allocated_responseauth(::BigPack::CCResponseAuth* responseauth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_dataBody();
  if (responseauth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(responseauth);
    if (message_arena != submessage_arena) {
      responseauth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responseauth, submessage_arena);
    }
    set_has_responseauth();
    dataBody_.responseauth_ = responseauth;
  }
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.responseAuth)
}
void Exchange::set_allocated_getdesktop(::BigPack::CCGetDesktop* getdesktop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_dataBody();
  if (getdesktop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getdesktop);
    if (message_arena != submessage_arena) {
      getdesktop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getdesktop, submessage_arena);
    }
    set_has_getdesktop();
    dataBody_.getdesktop_ = getdesktop;
  }
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.getDesktop)
}
void Exchange::set_allocated_imgparameters(::BigPack::CCGiveImgParameters* imgparameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_dataBody();
  if (imgparameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(imgparameters);
    if (message_arena != submessage_arena) {
      imgparameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imgparameters, submessage_arena);
    }
    set_has_imgparameters();
    dataBody_.imgparameters_ = imgparameters;
  }
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.imgParameters)
}
void Exchange::set_allocated_img(::BigPack::CCGiveImg* img) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_dataBody();
  if (img) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(img);
    if (message_arena != submessage_arena) {
      img = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, img, submessage_arena);
    }
    set_has_img();
    dataBody_.img_ = img;
  }
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.img)
}
void Exchange::set_allocated_tilereceived(::BigPack::APTileReceived* tilereceived) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_dataBody();
  if (tilereceived) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tilereceived);
    if (message_arena != submessage_arena) {
      tilereceived = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tilereceived, submessage_arena);
    }
    set_has_tilereceived();
    dataBody_.tilereceived_ = tilereceived;
  }
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.tileReceived)
}
void Exchange::set_allocated_mousemove(::BigPack::APMouseMove* mousemove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_dataBody();
  if (mousemove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mousemove);
    if (message_arena != submessage_arena) {
      mousemove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mousemove, submessage_arena);
    }
    set_has_mousemove();
    dataBody_.mousemove_ = mousemove;
  }
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.mouseMove)
}
Exchange::Exchange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.Exchange)
}
Exchange::Exchange(const Exchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resourceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resourceid().empty()) {
    resourceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resourceid(), 
      GetArena());
  }
  targetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_targetid().empty()) {
    targetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_targetid(), 
      GetArena());
  }
  datatype_ = from.datatype_;
  clear_has_dataBody();
  switch (from.dataBody_case()) {
    case kHostInfo: {
      _internal_mutable_hostinfo()->::BigPack::CsRegisterHost::MergeFrom(from._internal_hostinfo());
      break;
    }
    case kReplyInfo: {
      _internal_mutable_replyinfo()->::BigPack::ScReplyRegister::MergeFrom(from._internal_replyinfo());
      break;
    }
    case kQueryHost: {
      _internal_mutable_queryhost()->::BigPack::CsQueryHost::MergeFrom(from._internal_queryhost());
      break;
    }
    case kReplyQuery: {
      _internal_mutable_replyquery()->::BigPack::ScReplyQuery::MergeFrom(from._internal_replyquery());
      break;
    }
    case kRequestAuth: {
      _internal_mutable_requestauth()->::BigPack::CCRequestAuth::MergeFrom(from._internal_requestauth());
      break;
    }
    case kResponseAuth: {
      _internal_mutable_responseauth()->::BigPack::CCResponseAuth::MergeFrom(from._internal_responseauth());
      break;
    }
    case kGetDesktop: {
      _internal_mutable_getdesktop()->::BigPack::CCGetDesktop::MergeFrom(from._internal_getdesktop());
      break;
    }
    case kImgParameters: {
      _internal_mutable_imgparameters()->::BigPack::CCGiveImgParameters::MergeFrom(from._internal_imgparameters());
      break;
    }
    case kImg: {
      _internal_mutable_img()->::BigPack::CCGiveImg::MergeFrom(from._internal_img());
      break;
    }
    case kTileReceived: {
      _internal_mutable_tilereceived()->::BigPack::APTileReceived::MergeFrom(from._internal_tilereceived());
      break;
    }
    case kMouseMove: {
      _internal_mutable_mousemove()->::BigPack::APMouseMove::MergeFrom(from._internal_mousemove());
      break;
    }
    case DATABODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:BigPack.Exchange)
}

void Exchange::SharedCtor() {
resourceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
targetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
datatype_ = 0;
clear_has_dataBody();
}

Exchange::~Exchange() {
  // @@protoc_insertion_point(destructor:BigPack.Exchange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Exchange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  resourceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_dataBody()) {
    clear_dataBody();
  }
}

void Exchange::ArenaDtor(void* object) {
  Exchange* _this = reinterpret_cast< Exchange* >(object);
  (void)_this;
}
void Exchange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Exchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Exchange::clear_dataBody() {
// @@protoc_insertion_point(one_of_clear_start:BigPack.Exchange)
  switch (dataBody_case()) {
    case kHostInfo: {
      if (GetArena() == nullptr) {
        delete dataBody_.hostinfo_;
      }
      break;
    }
    case kReplyInfo: {
      if (GetArena() == nullptr) {
        delete dataBody_.replyinfo_;
      }
      break;
    }
    case kQueryHost: {
      if (GetArena() == nullptr) {
        delete dataBody_.queryhost_;
      }
      break;
    }
    case kReplyQuery: {
      if (GetArena() == nullptr) {
        delete dataBody_.replyquery_;
      }
      break;
    }
    case kRequestAuth: {
      if (GetArena() == nullptr) {
        delete dataBody_.requestauth_;
      }
      break;
    }
    case kResponseAuth: {
      if (GetArena() == nullptr) {
        delete dataBody_.responseauth_;
      }
      break;
    }
    case kGetDesktop: {
      if (GetArena() == nullptr) {
        delete dataBody_.getdesktop_;
      }
      break;
    }
    case kImgParameters: {
      if (GetArena() == nullptr) {
        delete dataBody_.imgparameters_;
      }
      break;
    }
    case kImg: {
      if (GetArena() == nullptr) {
        delete dataBody_.img_;
      }
      break;
    }
    case kTileReceived: {
      if (GetArena() == nullptr) {
        delete dataBody_.tilereceived_;
      }
      break;
    }
    case kMouseMove: {
      if (GetArena() == nullptr) {
        delete dataBody_.mousemove_;
      }
      break;
    }
    case DATABODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATABODY_NOT_SET;
}


void Exchange::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.Exchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resourceid_.ClearToEmpty();
  targetid_.ClearToEmpty();
  datatype_ = 0;
  clear_dataBody();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Exchange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .BigPack.Exchange.DataType dataType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_datatype(static_cast<::BigPack::Exchange_DataType>(val));
        } else goto handle_unusual;
        continue;
      // string resourceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_resourceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BigPack.Exchange.resourceID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string targetID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_targetid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BigPack.Exchange.targetID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BigPack.CsRegisterHost hostInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hostinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BigPack.ScReplyRegister replyInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_replyinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BigPack.CsQueryHost queryHost = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_queryhost(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BigPack.ScReplyQuery replyQuery = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_replyquery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BigPack.CCRequestAuth requestAuth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestauth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BigPack.CCResponseAuth responseAuth = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_responseauth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BigPack.CCGetDesktop getDesktop = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_getdesktop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BigPack.CCGiveImgParameters imgParameters = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_imgparameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BigPack.CCGiveImg img = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_img(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BigPack.APTileReceived tileReceived = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tilereceived(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BigPack.APMouseMove mouseMove = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_mousemove(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Exchange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.Exchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BigPack.Exchange.DataType dataType = 1;
  if (this->datatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_datatype(), target);
  }

  // string resourceID = 2;
  if (this->resourceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourceid().data(), static_cast<int>(this->_internal_resourceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BigPack.Exchange.resourceID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resourceid(), target);
  }

  // string targetID = 3;
  if (this->targetid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetid().data(), static_cast<int>(this->_internal_targetid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BigPack.Exchange.targetID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_targetid(), target);
  }

  // .BigPack.CsRegisterHost hostInfo = 4;
  if (_internal_has_hostinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hostinfo(this), target, stream);
  }

  // .BigPack.ScReplyRegister replyInfo = 5;
  if (_internal_has_replyinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::replyinfo(this), target, stream);
  }

  // .BigPack.CsQueryHost queryHost = 6;
  if (_internal_has_queryhost()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::queryhost(this), target, stream);
  }

  // .BigPack.ScReplyQuery replyQuery = 7;
  if (_internal_has_replyquery()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::replyquery(this), target, stream);
  }

  // .BigPack.CCRequestAuth requestAuth = 8;
  if (_internal_has_requestauth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::requestauth(this), target, stream);
  }

  // .BigPack.CCResponseAuth responseAuth = 9;
  if (_internal_has_responseauth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::responseauth(this), target, stream);
  }

  // .BigPack.CCGetDesktop getDesktop = 10;
  if (_internal_has_getdesktop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::getdesktop(this), target, stream);
  }

  // .BigPack.CCGiveImgParameters imgParameters = 11;
  if (_internal_has_imgparameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::imgparameters(this), target, stream);
  }

  // .BigPack.CCGiveImg img = 12;
  if (_internal_has_img()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::img(this), target, stream);
  }

  // .BigPack.APTileReceived tileReceived = 13;
  if (_internal_has_tilereceived()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::tilereceived(this), target, stream);
  }

  // .BigPack.APMouseMove mouseMove = 14;
  if (_internal_has_mousemove()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::mousemove(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.Exchange)
  return target;
}

size_t Exchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.Exchange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resourceID = 2;
  if (this->resourceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourceid());
  }

  // string targetID = 3;
  if (this->targetid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetid());
  }

  // .BigPack.Exchange.DataType dataType = 1;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_datatype());
  }

  switch (dataBody_case()) {
    // .BigPack.CsRegisterHost hostInfo = 4;
    case kHostInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dataBody_.hostinfo_);
      break;
    }
    // .BigPack.ScReplyRegister replyInfo = 5;
    case kReplyInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dataBody_.replyinfo_);
      break;
    }
    // .BigPack.CsQueryHost queryHost = 6;
    case kQueryHost: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dataBody_.queryhost_);
      break;
    }
    // .BigPack.ScReplyQuery replyQuery = 7;
    case kReplyQuery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dataBody_.replyquery_);
      break;
    }
    // .BigPack.CCRequestAuth requestAuth = 8;
    case kRequestAuth: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dataBody_.requestauth_);
      break;
    }
    // .BigPack.CCResponseAuth responseAuth = 9;
    case kResponseAuth: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dataBody_.responseauth_);
      break;
    }
    // .BigPack.CCGetDesktop getDesktop = 10;
    case kGetDesktop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dataBody_.getdesktop_);
      break;
    }
    // .BigPack.CCGiveImgParameters imgParameters = 11;
    case kImgParameters: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dataBody_.imgparameters_);
      break;
    }
    // .BigPack.CCGiveImg img = 12;
    case kImg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dataBody_.img_);
      break;
    }
    // .BigPack.APTileReceived tileReceived = 13;
    case kTileReceived: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dataBody_.tilereceived_);
      break;
    }
    // .BigPack.APMouseMove mouseMove = 14;
    case kMouseMove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dataBody_.mousemove_);
      break;
    }
    case DATABODY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Exchange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.Exchange)
  GOOGLE_DCHECK_NE(&from, this);
  const Exchange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Exchange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.Exchange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.Exchange)
    MergeFrom(*source);
  }
}

void Exchange::MergeFrom(const Exchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.Exchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resourceid().size() > 0) {
    _internal_set_resourceid(from._internal_resourceid());
  }
  if (from.targetid().size() > 0) {
    _internal_set_targetid(from._internal_targetid());
  }
  if (from.datatype() != 0) {
    _internal_set_datatype(from._internal_datatype());
  }
  switch (from.dataBody_case()) {
    case kHostInfo: {
      _internal_mutable_hostinfo()->::BigPack::CsRegisterHost::MergeFrom(from._internal_hostinfo());
      break;
    }
    case kReplyInfo: {
      _internal_mutable_replyinfo()->::BigPack::ScReplyRegister::MergeFrom(from._internal_replyinfo());
      break;
    }
    case kQueryHost: {
      _internal_mutable_queryhost()->::BigPack::CsQueryHost::MergeFrom(from._internal_queryhost());
      break;
    }
    case kReplyQuery: {
      _internal_mutable_replyquery()->::BigPack::ScReplyQuery::MergeFrom(from._internal_replyquery());
      break;
    }
    case kRequestAuth: {
      _internal_mutable_requestauth()->::BigPack::CCRequestAuth::MergeFrom(from._internal_requestauth());
      break;
    }
    case kResponseAuth: {
      _internal_mutable_responseauth()->::BigPack::CCResponseAuth::MergeFrom(from._internal_responseauth());
      break;
    }
    case kGetDesktop: {
      _internal_mutable_getdesktop()->::BigPack::CCGetDesktop::MergeFrom(from._internal_getdesktop());
      break;
    }
    case kImgParameters: {
      _internal_mutable_imgparameters()->::BigPack::CCGiveImgParameters::MergeFrom(from._internal_imgparameters());
      break;
    }
    case kImg: {
      _internal_mutable_img()->::BigPack::CCGiveImg::MergeFrom(from._internal_img());
      break;
    }
    case kTileReceived: {
      _internal_mutable_tilereceived()->::BigPack::APTileReceived::MergeFrom(from._internal_tilereceived());
      break;
    }
    case kMouseMove: {
      _internal_mutable_mousemove()->::BigPack::APMouseMove::MergeFrom(from._internal_mousemove());
      break;
    }
    case DATABODY_NOT_SET: {
      break;
    }
  }
}

void Exchange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Exchange::CopyFrom(const Exchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Exchange::IsInitialized() const {
  return true;
}

void Exchange::InternalSwap(Exchange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resourceid_.Swap(&other->resourceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetid_.Swap(&other->targetid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(datatype_, other->datatype_);
  swap(dataBody_, other->dataBody_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Exchange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[0]);
}

// ===================================================================

class WMHeartbeat::_Internal {
 public:
};

WMHeartbeat::WMHeartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.WMHeartbeat)
}
WMHeartbeat::WMHeartbeat(const WMHeartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BigPack.WMHeartbeat)
}

void WMHeartbeat::SharedCtor() {
}

WMHeartbeat::~WMHeartbeat() {
  // @@protoc_insertion_point(destructor:BigPack.WMHeartbeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WMHeartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WMHeartbeat::ArenaDtor(void* object) {
  WMHeartbeat* _this = reinterpret_cast< WMHeartbeat* >(object);
  (void)_this;
}
void WMHeartbeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WMHeartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WMHeartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.WMHeartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WMHeartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WMHeartbeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.WMHeartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.WMHeartbeat)
  return target;
}

size_t WMHeartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.WMHeartbeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WMHeartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.WMHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const WMHeartbeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WMHeartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.WMHeartbeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.WMHeartbeat)
    MergeFrom(*source);
  }
}

void WMHeartbeat::MergeFrom(const WMHeartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.WMHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WMHeartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.WMHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WMHeartbeat::CopyFrom(const WMHeartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.WMHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WMHeartbeat::IsInitialized() const {
  return true;
}

void WMHeartbeat::InternalSwap(WMHeartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WMHeartbeat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[1]);
}

// ===================================================================

class CsRegisterHost::_Internal {
 public:
};

CsRegisterHost::CsRegisterHost(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.CsRegisterHost)
}
CsRegisterHost::CsRegisterHost(const CsRegisterHost& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cpuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpuid().empty()) {
    cpuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cpuid(), 
      GetArena());
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceid().empty()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArena());
  }
  mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mac().empty()) {
    mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac(), 
      GetArena());
  }
  uniqueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uniqueid().empty()) {
    uniqueid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uniqueid(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:BigPack.CsRegisterHost)
}

void CsRegisterHost::SharedCtor() {
cpuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
uniqueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

CsRegisterHost::~CsRegisterHost() {
  // @@protoc_insertion_point(destructor:BigPack.CsRegisterHost)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CsRegisterHost::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cpuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uniqueid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CsRegisterHost::ArenaDtor(void* object) {
  CsRegisterHost* _this = reinterpret_cast< CsRegisterHost* >(object);
  (void)_this;
}
void CsRegisterHost::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CsRegisterHost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CsRegisterHost::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.CsRegisterHost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpuid_.ClearToEmpty();
  deviceid_.ClearToEmpty();
  mac_.ClearToEmpty();
  uniqueid_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CsRegisterHost::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cpuID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cpuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BigPack.CsRegisterHost.cpuID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BigPack.CsRegisterHost.deviceID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mac = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BigPack.CsRegisterHost.mac"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uniqueID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_uniqueid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BigPack.CsRegisterHost.uniqueID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CsRegisterHost::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.CsRegisterHost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cpuID = 1;
  if (this->cpuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpuid().data(), static_cast<int>(this->_internal_cpuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BigPack.CsRegisterHost.cpuID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cpuid(), target);
  }

  // string deviceID = 2;
  if (this->deviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BigPack.CsRegisterHost.deviceID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceid(), target);
  }

  // string mac = 3;
  if (this->mac().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac().data(), static_cast<int>(this->_internal_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BigPack.CsRegisterHost.mac");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mac(), target);
  }

  // string uniqueID = 4;
  if (this->uniqueid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uniqueid().data(), static_cast<int>(this->_internal_uniqueid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BigPack.CsRegisterHost.uniqueID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uniqueid(), target);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.CsRegisterHost)
  return target;
}

size_t CsRegisterHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.CsRegisterHost)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cpuID = 1;
  if (this->cpuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpuid());
  }

  // string deviceID = 2;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string mac = 3;
  if (this->mac().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac());
  }

  // string uniqueID = 4;
  if (this->uniqueid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uniqueid());
  }

  // int32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CsRegisterHost::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.CsRegisterHost)
  GOOGLE_DCHECK_NE(&from, this);
  const CsRegisterHost* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CsRegisterHost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.CsRegisterHost)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.CsRegisterHost)
    MergeFrom(*source);
  }
}

void CsRegisterHost::MergeFrom(const CsRegisterHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.CsRegisterHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cpuid().size() > 0) {
    _internal_set_cpuid(from._internal_cpuid());
  }
  if (from.deviceid().size() > 0) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (from.mac().size() > 0) {
    _internal_set_mac(from._internal_mac());
  }
  if (from.uniqueid().size() > 0) {
    _internal_set_uniqueid(from._internal_uniqueid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CsRegisterHost::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.CsRegisterHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CsRegisterHost::CopyFrom(const CsRegisterHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.CsRegisterHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CsRegisterHost::IsInitialized() const {
  return true;
}

void CsRegisterHost::InternalSwap(CsRegisterHost* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cpuid_.Swap(&other->cpuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  deviceid_.Swap(&other->deviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mac_.Swap(&other->mac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uniqueid_.Swap(&other->uniqueid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CsRegisterHost::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[2]);
}

// ===================================================================

class ScReplyRegister::_Internal {
 public:
};

ScReplyRegister::ScReplyRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.ScReplyRegister)
}
ScReplyRegister::ScReplyRegister(const ScReplyRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  registerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_registerid().empty()) {
    registerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_registerid(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:BigPack.ScReplyRegister)
}

void ScReplyRegister::SharedCtor() {
registerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

ScReplyRegister::~ScReplyRegister() {
  // @@protoc_insertion_point(destructor:BigPack.ScReplyRegister)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScReplyRegister::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  registerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScReplyRegister::ArenaDtor(void* object) {
  ScReplyRegister* _this = reinterpret_cast< ScReplyRegister* >(object);
  (void)_this;
}
void ScReplyRegister::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScReplyRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScReplyRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.ScReplyRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  registerid_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScReplyRegister::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string registerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_registerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BigPack.ScReplyRegister.registerId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScReplyRegister::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.ScReplyRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string registerId = 2;
  if (this->registerid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_registerid().data(), static_cast<int>(this->_internal_registerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BigPack.ScReplyRegister.registerId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_registerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.ScReplyRegister)
  return target;
}

size_t ScReplyRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.ScReplyRegister)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string registerId = 2;
  if (this->registerid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_registerid());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScReplyRegister::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.ScReplyRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const ScReplyRegister* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScReplyRegister>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.ScReplyRegister)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.ScReplyRegister)
    MergeFrom(*source);
  }
}

void ScReplyRegister::MergeFrom(const ScReplyRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.ScReplyRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.registerid().size() > 0) {
    _internal_set_registerid(from._internal_registerid());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ScReplyRegister::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.ScReplyRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScReplyRegister::CopyFrom(const ScReplyRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.ScReplyRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScReplyRegister::IsInitialized() const {
  return true;
}

void ScReplyRegister::InternalSwap(ScReplyRegister* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  registerid_.Swap(&other->registerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScReplyRegister::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[3]);
}

// ===================================================================

class CsQueryHost::_Internal {
 public:
};

CsQueryHost::CsQueryHost(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.CsQueryHost)
}
CsQueryHost::CsQueryHost(const CsQueryHost& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BigPack.CsQueryHost)
}

void CsQueryHost::SharedCtor() {
}

CsQueryHost::~CsQueryHost() {
  // @@protoc_insertion_point(destructor:BigPack.CsQueryHost)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CsQueryHost::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CsQueryHost::ArenaDtor(void* object) {
  CsQueryHost* _this = reinterpret_cast< CsQueryHost* >(object);
  (void)_this;
}
void CsQueryHost::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CsQueryHost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CsQueryHost::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.CsQueryHost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CsQueryHost::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CsQueryHost::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.CsQueryHost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.CsQueryHost)
  return target;
}

size_t CsQueryHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.CsQueryHost)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CsQueryHost::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.CsQueryHost)
  GOOGLE_DCHECK_NE(&from, this);
  const CsQueryHost* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CsQueryHost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.CsQueryHost)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.CsQueryHost)
    MergeFrom(*source);
  }
}

void CsQueryHost::MergeFrom(const CsQueryHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.CsQueryHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CsQueryHost::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.CsQueryHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CsQueryHost::CopyFrom(const CsQueryHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.CsQueryHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CsQueryHost::IsInitialized() const {
  return true;
}

void CsQueryHost::InternalSwap(CsQueryHost* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CsQueryHost::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[4]);
}

// ===================================================================

class ScReplyQuery::_Internal {
 public:
};

ScReplyQuery::ScReplyQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.ScReplyQuery)
}
ScReplyQuery::ScReplyQuery(const ScReplyQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  querymessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_querymessage().empty()) {
    querymessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_querymessage(), 
      GetArena());
  }
  ifexithost_ = from.ifexithost_;
  // @@protoc_insertion_point(copy_constructor:BigPack.ScReplyQuery)
}

void ScReplyQuery::SharedCtor() {
querymessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ifexithost_ = false;
}

ScReplyQuery::~ScReplyQuery() {
  // @@protoc_insertion_point(destructor:BigPack.ScReplyQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScReplyQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  querymessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScReplyQuery::ArenaDtor(void* object) {
  ScReplyQuery* _this = reinterpret_cast< ScReplyQuery* >(object);
  (void)_this;
}
void ScReplyQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScReplyQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScReplyQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.ScReplyQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  querymessage_.ClearToEmpty();
  ifexithost_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScReplyQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ifExitHost = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ifexithost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string queryMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_querymessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BigPack.ScReplyQuery.queryMessage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScReplyQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.ScReplyQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ifExitHost = 1;
  if (this->ifexithost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ifexithost(), target);
  }

  // string queryMessage = 2;
  if (this->querymessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_querymessage().data(), static_cast<int>(this->_internal_querymessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BigPack.ScReplyQuery.queryMessage");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_querymessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.ScReplyQuery)
  return target;
}

size_t ScReplyQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.ScReplyQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queryMessage = 2;
  if (this->querymessage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_querymessage());
  }

  // bool ifExitHost = 1;
  if (this->ifexithost() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScReplyQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.ScReplyQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ScReplyQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScReplyQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.ScReplyQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.ScReplyQuery)
    MergeFrom(*source);
  }
}

void ScReplyQuery::MergeFrom(const ScReplyQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.ScReplyQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.querymessage().size() > 0) {
    _internal_set_querymessage(from._internal_querymessage());
  }
  if (from.ifexithost() != 0) {
    _internal_set_ifexithost(from._internal_ifexithost());
  }
}

void ScReplyQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.ScReplyQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScReplyQuery::CopyFrom(const ScReplyQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.ScReplyQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScReplyQuery::IsInitialized() const {
  return true;
}

void ScReplyQuery::InternalSwap(ScReplyQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  querymessage_.Swap(&other->querymessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ifexithost_, other->ifexithost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScReplyQuery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[5]);
}

// ===================================================================

class CCRequestAuth::_Internal {
 public:
};

CCRequestAuth::CCRequestAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.CCRequestAuth)
}
CCRequestAuth::CCRequestAuth(const CCRequestAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  authpass_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_authpass().empty()) {
    authpass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_authpass(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BigPack.CCRequestAuth)
}

void CCRequestAuth::SharedCtor() {
authpass_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCRequestAuth::~CCRequestAuth() {
  // @@protoc_insertion_point(destructor:BigPack.CCRequestAuth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCRequestAuth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  authpass_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCRequestAuth::ArenaDtor(void* object) {
  CCRequestAuth* _this = reinterpret_cast< CCRequestAuth* >(object);
  (void)_this;
}
void CCRequestAuth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCRequestAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCRequestAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.CCRequestAuth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  authpass_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCRequestAuth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string authPass = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_authpass();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BigPack.CCRequestAuth.authPass"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCRequestAuth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.CCRequestAuth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string authPass = 1;
  if (this->authpass().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authpass().data(), static_cast<int>(this->_internal_authpass().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BigPack.CCRequestAuth.authPass");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_authpass(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.CCRequestAuth)
  return target;
}

size_t CCRequestAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.CCRequestAuth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string authPass = 1;
  if (this->authpass().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authpass());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCRequestAuth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.CCRequestAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const CCRequestAuth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCRequestAuth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.CCRequestAuth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.CCRequestAuth)
    MergeFrom(*source);
  }
}

void CCRequestAuth::MergeFrom(const CCRequestAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.CCRequestAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.authpass().size() > 0) {
    _internal_set_authpass(from._internal_authpass());
  }
}

void CCRequestAuth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.CCRequestAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCRequestAuth::CopyFrom(const CCRequestAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.CCRequestAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCRequestAuth::IsInitialized() const {
  return true;
}

void CCRequestAuth::InternalSwap(CCRequestAuth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  authpass_.Swap(&other->authpass_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CCRequestAuth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[6]);
}

// ===================================================================

class CCResponseAuth::_Internal {
 public:
};

CCResponseAuth::CCResponseAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.CCResponseAuth)
}
CCResponseAuth::CCResponseAuth(const CCResponseAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:BigPack.CCResponseAuth)
}

void CCResponseAuth::SharedCtor() {
info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

CCResponseAuth::~CCResponseAuth() {
  // @@protoc_insertion_point(destructor:BigPack.CCResponseAuth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCResponseAuth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCResponseAuth::ArenaDtor(void* object) {
  CCResponseAuth* _this = reinterpret_cast< CCResponseAuth* >(object);
  (void)_this;
}
void CCResponseAuth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCResponseAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCResponseAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.CCResponseAuth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCResponseAuth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BigPack.CCResponseAuth.info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCResponseAuth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.CCResponseAuth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string info = 2;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BigPack.CCResponseAuth.info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.CCResponseAuth)
  return target;
}

size_t CCResponseAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.CCResponseAuth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 2;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCResponseAuth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.CCResponseAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const CCResponseAuth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCResponseAuth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.CCResponseAuth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.CCResponseAuth)
    MergeFrom(*source);
  }
}

void CCResponseAuth::MergeFrom(const CCResponseAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.CCResponseAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.info().size() > 0) {
    _internal_set_info(from._internal_info());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void CCResponseAuth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.CCResponseAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCResponseAuth::CopyFrom(const CCResponseAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.CCResponseAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCResponseAuth::IsInitialized() const {
  return true;
}

void CCResponseAuth::InternalSwap(CCResponseAuth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCResponseAuth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[7]);
}

// ===================================================================

class CCGetDesktop::_Internal {
 public:
};

CCGetDesktop::CCGetDesktop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.CCGetDesktop)
}
CCGetDesktop::CCGetDesktop(const CCGetDesktop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BigPack.CCGetDesktop)
}

void CCGetDesktop::SharedCtor() {
}

CCGetDesktop::~CCGetDesktop() {
  // @@protoc_insertion_point(destructor:BigPack.CCGetDesktop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCGetDesktop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCGetDesktop::ArenaDtor(void* object) {
  CCGetDesktop* _this = reinterpret_cast< CCGetDesktop* >(object);
  (void)_this;
}
void CCGetDesktop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCGetDesktop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCGetDesktop::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.CCGetDesktop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCGetDesktop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCGetDesktop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.CCGetDesktop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.CCGetDesktop)
  return target;
}

size_t CCGetDesktop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.CCGetDesktop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCGetDesktop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.CCGetDesktop)
  GOOGLE_DCHECK_NE(&from, this);
  const CCGetDesktop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCGetDesktop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.CCGetDesktop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.CCGetDesktop)
    MergeFrom(*source);
  }
}

void CCGetDesktop::MergeFrom(const CCGetDesktop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.CCGetDesktop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCGetDesktop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.CCGetDesktop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCGetDesktop::CopyFrom(const CCGetDesktop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.CCGetDesktop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCGetDesktop::IsInitialized() const {
  return true;
}

void CCGetDesktop::InternalSwap(CCGetDesktop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCGetDesktop::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[8]);
}

// ===================================================================

class CCGiveImgParameters::_Internal {
 public:
};

CCGiveImgParameters::CCGiveImgParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.CCGiveImgParameters)
}
CCGiveImgParameters::CCGiveImgParameters(const CCGiveImgParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&rectwidth_) -
    reinterpret_cast<char*>(&width_)) + sizeof(rectwidth_));
  // @@protoc_insertion_point(copy_constructor:BigPack.CCGiveImgParameters)
}

void CCGiveImgParameters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rectwidth_) -
    reinterpret_cast<char*>(&width_)) + sizeof(rectwidth_));
}

CCGiveImgParameters::~CCGiveImgParameters() {
  // @@protoc_insertion_point(destructor:BigPack.CCGiveImgParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCGiveImgParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCGiveImgParameters::ArenaDtor(void* object) {
  CCGiveImgParameters* _this = reinterpret_cast< CCGiveImgParameters* >(object);
  (void)_this;
}
void CCGiveImgParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCGiveImgParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCGiveImgParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.CCGiveImgParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rectwidth_) -
      reinterpret_cast<char*>(&width_)) + sizeof(rectwidth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCGiveImgParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rectWidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rectwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCGiveImgParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.CCGiveImgParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // int32 rectWidth = 3;
  if (this->rectwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rectwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.CCGiveImgParameters)
  return target;
}

size_t CCGiveImgParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.CCGiveImgParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 rectWidth = 3;
  if (this->rectwidth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rectwidth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCGiveImgParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.CCGiveImgParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const CCGiveImgParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCGiveImgParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.CCGiveImgParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.CCGiveImgParameters)
    MergeFrom(*source);
  }
}

void CCGiveImgParameters::MergeFrom(const CCGiveImgParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.CCGiveImgParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.rectwidth() != 0) {
    _internal_set_rectwidth(from._internal_rectwidth());
  }
}

void CCGiveImgParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.CCGiveImgParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCGiveImgParameters::CopyFrom(const CCGiveImgParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.CCGiveImgParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCGiveImgParameters::IsInitialized() const {
  return true;
}

void CCGiveImgParameters::InternalSwap(CCGiveImgParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCGiveImgParameters, rectwidth_)
      + sizeof(CCGiveImgParameters::rectwidth_)
      - PROTOBUF_FIELD_OFFSET(CCGiveImgParameters, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCGiveImgParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[9]);
}

// ===================================================================

class CCGiveImg::_Internal {
 public:
};

CCGiveImg::CCGiveImg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.CCGiveImg)
}
CCGiveImg::CCGiveImg(const CCGiveImg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imgdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imgdata().empty()) {
    imgdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imgdata(), 
      GetArena());
  }
  ::memcpy(&posx_, &from.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&tilenum_) -
    reinterpret_cast<char*>(&posx_)) + sizeof(tilenum_));
  // @@protoc_insertion_point(copy_constructor:BigPack.CCGiveImg)
}

void CCGiveImg::SharedCtor() {
imgdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&posx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tilenum_) -
    reinterpret_cast<char*>(&posx_)) + sizeof(tilenum_));
}

CCGiveImg::~CCGiveImg() {
  // @@protoc_insertion_point(destructor:BigPack.CCGiveImg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCGiveImg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  imgdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCGiveImg::ArenaDtor(void* object) {
  CCGiveImg* _this = reinterpret_cast< CCGiveImg* >(object);
  (void)_this;
}
void CCGiveImg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCGiveImg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCGiveImg::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.CCGiveImg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imgdata_.ClearToEmpty();
  ::memset(&posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tilenum_) -
      reinterpret_cast<char*>(&posx_)) + sizeof(tilenum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCGiveImg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 posX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 posY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tileNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tilenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes imgData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_imgdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCGiveImg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.CCGiveImg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 posX = 1;
  if (this->posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_posx(), target);
  }

  // int32 posY = 2;
  if (this->posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_posy(), target);
  }

  // int32 tileNum = 3;
  if (this->tilenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tilenum(), target);
  }

  // bytes imgData = 4;
  if (this->imgdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_imgdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.CCGiveImg)
  return target;
}

size_t CCGiveImg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.CCGiveImg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes imgData = 4;
  if (this->imgdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imgdata());
  }

  // int32 posX = 1;
  if (this->posx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_posx());
  }

  // int32 posY = 2;
  if (this->posy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_posy());
  }

  // int32 tileNum = 3;
  if (this->tilenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tilenum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCGiveImg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.CCGiveImg)
  GOOGLE_DCHECK_NE(&from, this);
  const CCGiveImg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCGiveImg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.CCGiveImg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.CCGiveImg)
    MergeFrom(*source);
  }
}

void CCGiveImg::MergeFrom(const CCGiveImg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.CCGiveImg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imgdata().size() > 0) {
    _internal_set_imgdata(from._internal_imgdata());
  }
  if (from.posx() != 0) {
    _internal_set_posx(from._internal_posx());
  }
  if (from.posy() != 0) {
    _internal_set_posy(from._internal_posy());
  }
  if (from.tilenum() != 0) {
    _internal_set_tilenum(from._internal_tilenum());
  }
}

void CCGiveImg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.CCGiveImg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCGiveImg::CopyFrom(const CCGiveImg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.CCGiveImg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCGiveImg::IsInitialized() const {
  return true;
}

void CCGiveImg::InternalSwap(CCGiveImg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  imgdata_.Swap(&other->imgdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCGiveImg, tilenum_)
      + sizeof(CCGiveImg::tilenum_)
      - PROTOBUF_FIELD_OFFSET(CCGiveImg, posx_)>(
          reinterpret_cast<char*>(&posx_),
          reinterpret_cast<char*>(&other->posx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCGiveImg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[10]);
}

// ===================================================================

class APTileReceived::_Internal {
 public:
};

APTileReceived::APTileReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.APTileReceived)
}
APTileReceived::APTileReceived(const APTileReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tilenum_ = from.tilenum_;
  // @@protoc_insertion_point(copy_constructor:BigPack.APTileReceived)
}

void APTileReceived::SharedCtor() {
tilenum_ = 0;
}

APTileReceived::~APTileReceived() {
  // @@protoc_insertion_point(destructor:BigPack.APTileReceived)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void APTileReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void APTileReceived::ArenaDtor(void* object) {
  APTileReceived* _this = reinterpret_cast< APTileReceived* >(object);
  (void)_this;
}
void APTileReceived::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void APTileReceived::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void APTileReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.APTileReceived)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tilenum_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APTileReceived::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tileNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tilenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* APTileReceived::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.APTileReceived)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tileNum = 1;
  if (this->tilenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tilenum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.APTileReceived)
  return target;
}

size_t APTileReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.APTileReceived)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 tileNum = 1;
  if (this->tilenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tilenum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void APTileReceived::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.APTileReceived)
  GOOGLE_DCHECK_NE(&from, this);
  const APTileReceived* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<APTileReceived>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.APTileReceived)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.APTileReceived)
    MergeFrom(*source);
  }
}

void APTileReceived::MergeFrom(const APTileReceived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.APTileReceived)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tilenum() != 0) {
    _internal_set_tilenum(from._internal_tilenum());
  }
}

void APTileReceived::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.APTileReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APTileReceived::CopyFrom(const APTileReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.APTileReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APTileReceived::IsInitialized() const {
  return true;
}

void APTileReceived::InternalSwap(APTileReceived* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(tilenum_, other->tilenum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APTileReceived::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[11]);
}

// ===================================================================

class APMouseMove::_Internal {
 public:
};

APMouseMove::APMouseMove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BigPack.APMouseMove)
}
APMouseMove::APMouseMove(const APMouseMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pointx_, &from.pointx_,
    static_cast<size_t>(reinterpret_cast<char*>(&pointy_) -
    reinterpret_cast<char*>(&pointx_)) + sizeof(pointy_));
  // @@protoc_insertion_point(copy_constructor:BigPack.APMouseMove)
}

void APMouseMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pointx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pointy_) -
    reinterpret_cast<char*>(&pointx_)) + sizeof(pointy_));
}

APMouseMove::~APMouseMove() {
  // @@protoc_insertion_point(destructor:BigPack.APMouseMove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void APMouseMove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void APMouseMove::ArenaDtor(void* object) {
  APMouseMove* _this = reinterpret_cast< APMouseMove* >(object);
  (void)_this;
}
void APMouseMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void APMouseMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void APMouseMove::Clear() {
// @@protoc_insertion_point(message_clear_start:BigPack.APMouseMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pointx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pointy_) -
      reinterpret_cast<char*>(&pointx_)) + sizeof(pointy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APMouseMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 pointX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pointx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pointY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pointy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* APMouseMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BigPack.APMouseMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pointX = 1;
  if (this->pointx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pointx(), target);
  }

  // int32 pointY = 2;
  if (this->pointy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pointy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BigPack.APMouseMove)
  return target;
}

size_t APMouseMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BigPack.APMouseMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pointX = 1;
  if (this->pointx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pointx());
  }

  // int32 pointY = 2;
  if (this->pointy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pointy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void APMouseMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BigPack.APMouseMove)
  GOOGLE_DCHECK_NE(&from, this);
  const APMouseMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<APMouseMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BigPack.APMouseMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BigPack.APMouseMove)
    MergeFrom(*source);
  }
}

void APMouseMove::MergeFrom(const APMouseMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BigPack.APMouseMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pointx() != 0) {
    _internal_set_pointx(from._internal_pointx());
  }
  if (from.pointy() != 0) {
    _internal_set_pointy(from._internal_pointy());
  }
}

void APMouseMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BigPack.APMouseMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APMouseMove::CopyFrom(const APMouseMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BigPack.APMouseMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APMouseMove::IsInitialized() const {
  return true;
}

void APMouseMove::InternalSwap(APMouseMove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APMouseMove, pointy_)
      + sizeof(APMouseMove::pointy_)
      - PROTOBUF_FIELD_OFFSET(APMouseMove, pointx_)>(
          reinterpret_cast<char*>(&pointx_),
          reinterpret_cast<char*>(&other->pointx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APMouseMove::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Exchange_2eproto_getter, &descriptor_table_Exchange_2eproto_once,
      file_level_metadata_Exchange_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace BigPack
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BigPack::Exchange* Arena::CreateMaybeMessage< ::BigPack::Exchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::Exchange >(arena);
}
template<> PROTOBUF_NOINLINE ::BigPack::WMHeartbeat* Arena::CreateMaybeMessage< ::BigPack::WMHeartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::WMHeartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::BigPack::CsRegisterHost* Arena::CreateMaybeMessage< ::BigPack::CsRegisterHost >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::CsRegisterHost >(arena);
}
template<> PROTOBUF_NOINLINE ::BigPack::ScReplyRegister* Arena::CreateMaybeMessage< ::BigPack::ScReplyRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::ScReplyRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::BigPack::CsQueryHost* Arena::CreateMaybeMessage< ::BigPack::CsQueryHost >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::CsQueryHost >(arena);
}
template<> PROTOBUF_NOINLINE ::BigPack::ScReplyQuery* Arena::CreateMaybeMessage< ::BigPack::ScReplyQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::ScReplyQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::BigPack::CCRequestAuth* Arena::CreateMaybeMessage< ::BigPack::CCRequestAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::CCRequestAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::BigPack::CCResponseAuth* Arena::CreateMaybeMessage< ::BigPack::CCResponseAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::CCResponseAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::BigPack::CCGetDesktop* Arena::CreateMaybeMessage< ::BigPack::CCGetDesktop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::CCGetDesktop >(arena);
}
template<> PROTOBUF_NOINLINE ::BigPack::CCGiveImgParameters* Arena::CreateMaybeMessage< ::BigPack::CCGiveImgParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::CCGiveImgParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::BigPack::CCGiveImg* Arena::CreateMaybeMessage< ::BigPack::CCGiveImg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::CCGiveImg >(arena);
}
template<> PROTOBUF_NOINLINE ::BigPack::APTileReceived* Arena::CreateMaybeMessage< ::BigPack::APTileReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::APTileReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::BigPack::APMouseMove* Arena::CreateMaybeMessage< ::BigPack::APMouseMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BigPack::APMouseMove >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
