// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Exchange.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Exchange_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Exchange_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Exchange_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Exchange_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Exchange_2eproto;
namespace BigPack {
class APMouseMove;
struct APMouseMoveDefaultTypeInternal;
extern APMouseMoveDefaultTypeInternal _APMouseMove_default_instance_;
class APTileReceived;
struct APTileReceivedDefaultTypeInternal;
extern APTileReceivedDefaultTypeInternal _APTileReceived_default_instance_;
class CCGetDesktop;
struct CCGetDesktopDefaultTypeInternal;
extern CCGetDesktopDefaultTypeInternal _CCGetDesktop_default_instance_;
class CCGiveImg;
struct CCGiveImgDefaultTypeInternal;
extern CCGiveImgDefaultTypeInternal _CCGiveImg_default_instance_;
class CCGiveImgParameters;
struct CCGiveImgParametersDefaultTypeInternal;
extern CCGiveImgParametersDefaultTypeInternal _CCGiveImgParameters_default_instance_;
class CCRequestAuth;
struct CCRequestAuthDefaultTypeInternal;
extern CCRequestAuthDefaultTypeInternal _CCRequestAuth_default_instance_;
class CCResponseAuth;
struct CCResponseAuthDefaultTypeInternal;
extern CCResponseAuthDefaultTypeInternal _CCResponseAuth_default_instance_;
class CsQueryHost;
struct CsQueryHostDefaultTypeInternal;
extern CsQueryHostDefaultTypeInternal _CsQueryHost_default_instance_;
class CsRegisterHost;
struct CsRegisterHostDefaultTypeInternal;
extern CsRegisterHostDefaultTypeInternal _CsRegisterHost_default_instance_;
class Exchange;
struct ExchangeDefaultTypeInternal;
extern ExchangeDefaultTypeInternal _Exchange_default_instance_;
class ScReplyQuery;
struct ScReplyQueryDefaultTypeInternal;
extern ScReplyQueryDefaultTypeInternal _ScReplyQuery_default_instance_;
class ScReplyRegister;
struct ScReplyRegisterDefaultTypeInternal;
extern ScReplyRegisterDefaultTypeInternal _ScReplyRegister_default_instance_;
class WMHeartbeat;
struct WMHeartbeatDefaultTypeInternal;
extern WMHeartbeatDefaultTypeInternal _WMHeartbeat_default_instance_;
}  // namespace BigPack
PROTOBUF_NAMESPACE_OPEN
template<> ::BigPack::APMouseMove* Arena::CreateMaybeMessage<::BigPack::APMouseMove>(Arena*);
template<> ::BigPack::APTileReceived* Arena::CreateMaybeMessage<::BigPack::APTileReceived>(Arena*);
template<> ::BigPack::CCGetDesktop* Arena::CreateMaybeMessage<::BigPack::CCGetDesktop>(Arena*);
template<> ::BigPack::CCGiveImg* Arena::CreateMaybeMessage<::BigPack::CCGiveImg>(Arena*);
template<> ::BigPack::CCGiveImgParameters* Arena::CreateMaybeMessage<::BigPack::CCGiveImgParameters>(Arena*);
template<> ::BigPack::CCRequestAuth* Arena::CreateMaybeMessage<::BigPack::CCRequestAuth>(Arena*);
template<> ::BigPack::CCResponseAuth* Arena::CreateMaybeMessage<::BigPack::CCResponseAuth>(Arena*);
template<> ::BigPack::CsQueryHost* Arena::CreateMaybeMessage<::BigPack::CsQueryHost>(Arena*);
template<> ::BigPack::CsRegisterHost* Arena::CreateMaybeMessage<::BigPack::CsRegisterHost>(Arena*);
template<> ::BigPack::Exchange* Arena::CreateMaybeMessage<::BigPack::Exchange>(Arena*);
template<> ::BigPack::ScReplyQuery* Arena::CreateMaybeMessage<::BigPack::ScReplyQuery>(Arena*);
template<> ::BigPack::ScReplyRegister* Arena::CreateMaybeMessage<::BigPack::ScReplyRegister>(Arena*);
template<> ::BigPack::WMHeartbeat* Arena::CreateMaybeMessage<::BigPack::WMHeartbeat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace BigPack {

enum Exchange_DataType : int {
  Exchange_DataType_HEARTBEAT = 0,
  Exchange_DataType_REGISTER = 1,
  Exchange_DataType_REPLY_REGISTER = 2,
  Exchange_DataType_QUERY_HOST = 3,
  Exchange_DataType_REPLY_QUERY = 4,
  Exchange_DataType_REQUEST_AUTH = 5,
  Exchange_DataType_RESPONSE_AUTH = 6,
  Exchange_DataType_GET_DESKTOP = 7,
  Exchange_DataType_GIVE_IMG_PARA = 8,
  Exchange_DataType_GIVE_IMG = 9,
  Exchange_DataType_TILE_RECEIVED = 10,
  Exchange_DataType_MOUSE_MOVE = 11,
  Exchange_DataType_Exchange_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Exchange_DataType_Exchange_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Exchange_DataType_IsValid(int value);
constexpr Exchange_DataType Exchange_DataType_DataType_MIN = Exchange_DataType_HEARTBEAT;
constexpr Exchange_DataType Exchange_DataType_DataType_MAX = Exchange_DataType_MOUSE_MOVE;
constexpr int Exchange_DataType_DataType_ARRAYSIZE = Exchange_DataType_DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Exchange_DataType_descriptor();
template<typename T>
inline const std::string& Exchange_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Exchange_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Exchange_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Exchange_DataType_descriptor(), enum_t_value);
}
inline bool Exchange_DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Exchange_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Exchange_DataType>(
    Exchange_DataType_descriptor(), name, value);
}
// ===================================================================

class Exchange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.Exchange) */ {
 public:
  inline Exchange() : Exchange(nullptr) {}
  ~Exchange() override;
  explicit constexpr Exchange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Exchange(const Exchange& from);
  Exchange(Exchange&& from) noexcept
    : Exchange() {
    *this = ::std::move(from);
  }

  inline Exchange& operator=(const Exchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline Exchange& operator=(Exchange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Exchange& default_instance() {
    return *internal_default_instance();
  }
  enum DataBodyCase {
    kHostInfo = 4,
    kReplyInfo = 5,
    kQueryHost = 6,
    kReplyQuery = 7,
    kRequestAuth = 8,
    kResponseAuth = 9,
    kGetDesktop = 10,
    kImgParameters = 11,
    kImg = 12,
    kTileReceived = 13,
    kMouseMove = 14,
    DATABODY_NOT_SET = 0,
  };

  static inline const Exchange* internal_default_instance() {
    return reinterpret_cast<const Exchange*>(
               &_Exchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Exchange& a, Exchange& b) {
    a.Swap(&b);
  }
  inline void Swap(Exchange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Exchange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Exchange* New() const final {
    return CreateMaybeMessage<Exchange>(nullptr);
  }

  Exchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Exchange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Exchange& from);
  void MergeFrom(const Exchange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Exchange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.Exchange";
  }
  protected:
  explicit Exchange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Exchange_DataType DataType;
  static constexpr DataType HEARTBEAT =
    Exchange_DataType_HEARTBEAT;
  static constexpr DataType REGISTER =
    Exchange_DataType_REGISTER;
  static constexpr DataType REPLY_REGISTER =
    Exchange_DataType_REPLY_REGISTER;
  static constexpr DataType QUERY_HOST =
    Exchange_DataType_QUERY_HOST;
  static constexpr DataType REPLY_QUERY =
    Exchange_DataType_REPLY_QUERY;
  static constexpr DataType REQUEST_AUTH =
    Exchange_DataType_REQUEST_AUTH;
  static constexpr DataType RESPONSE_AUTH =
    Exchange_DataType_RESPONSE_AUTH;
  static constexpr DataType GET_DESKTOP =
    Exchange_DataType_GET_DESKTOP;
  static constexpr DataType GIVE_IMG_PARA =
    Exchange_DataType_GIVE_IMG_PARA;
  static constexpr DataType GIVE_IMG =
    Exchange_DataType_GIVE_IMG;
  static constexpr DataType TILE_RECEIVED =
    Exchange_DataType_TILE_RECEIVED;
  static constexpr DataType MOUSE_MOVE =
    Exchange_DataType_MOUSE_MOVE;
  static inline bool DataType_IsValid(int value) {
    return Exchange_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    Exchange_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    Exchange_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    Exchange_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return Exchange_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return Exchange_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataType* value) {
    return Exchange_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResourceIDFieldNumber = 2,
    kTargetIDFieldNumber = 3,
    kDataTypeFieldNumber = 1,
    kHostInfoFieldNumber = 4,
    kReplyInfoFieldNumber = 5,
    kQueryHostFieldNumber = 6,
    kReplyQueryFieldNumber = 7,
    kRequestAuthFieldNumber = 8,
    kResponseAuthFieldNumber = 9,
    kGetDesktopFieldNumber = 10,
    kImgParametersFieldNumber = 11,
    kImgFieldNumber = 12,
    kTileReceivedFieldNumber = 13,
    kMouseMoveFieldNumber = 14,
  };
  // string resourceID = 2;
  void clear_resourceid();
  const std::string& resourceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resourceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resourceid();
  std::string* release_resourceid();
  void set_allocated_resourceid(std::string* resourceid);
  private:
  const std::string& _internal_resourceid() const;
  void _internal_set_resourceid(const std::string& value);
  std::string* _internal_mutable_resourceid();
  public:

  // string targetID = 3;
  void clear_targetid();
  const std::string& targetid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetid();
  std::string* release_targetid();
  void set_allocated_targetid(std::string* targetid);
  private:
  const std::string& _internal_targetid() const;
  void _internal_set_targetid(const std::string& value);
  std::string* _internal_mutable_targetid();
  public:

  // .BigPack.Exchange.DataType dataType = 1;
  void clear_datatype();
  ::BigPack::Exchange_DataType datatype() const;
  void set_datatype(::BigPack::Exchange_DataType value);
  private:
  ::BigPack::Exchange_DataType _internal_datatype() const;
  void _internal_set_datatype(::BigPack::Exchange_DataType value);
  public:

  // .BigPack.CsRegisterHost hostInfo = 4;
  bool has_hostinfo() const;
  private:
  bool _internal_has_hostinfo() const;
  public:
  void clear_hostinfo();
  const ::BigPack::CsRegisterHost& hostinfo() const;
  ::BigPack::CsRegisterHost* release_hostinfo();
  ::BigPack::CsRegisterHost* mutable_hostinfo();
  void set_allocated_hostinfo(::BigPack::CsRegisterHost* hostinfo);
  private:
  const ::BigPack::CsRegisterHost& _internal_hostinfo() const;
  ::BigPack::CsRegisterHost* _internal_mutable_hostinfo();
  public:
  void unsafe_arena_set_allocated_hostinfo(
      ::BigPack::CsRegisterHost* hostinfo);
  ::BigPack::CsRegisterHost* unsafe_arena_release_hostinfo();

  // .BigPack.ScReplyRegister replyInfo = 5;
  bool has_replyinfo() const;
  private:
  bool _internal_has_replyinfo() const;
  public:
  void clear_replyinfo();
  const ::BigPack::ScReplyRegister& replyinfo() const;
  ::BigPack::ScReplyRegister* release_replyinfo();
  ::BigPack::ScReplyRegister* mutable_replyinfo();
  void set_allocated_replyinfo(::BigPack::ScReplyRegister* replyinfo);
  private:
  const ::BigPack::ScReplyRegister& _internal_replyinfo() const;
  ::BigPack::ScReplyRegister* _internal_mutable_replyinfo();
  public:
  void unsafe_arena_set_allocated_replyinfo(
      ::BigPack::ScReplyRegister* replyinfo);
  ::BigPack::ScReplyRegister* unsafe_arena_release_replyinfo();

  // .BigPack.CsQueryHost queryHost = 6;
  bool has_queryhost() const;
  private:
  bool _internal_has_queryhost() const;
  public:
  void clear_queryhost();
  const ::BigPack::CsQueryHost& queryhost() const;
  ::BigPack::CsQueryHost* release_queryhost();
  ::BigPack::CsQueryHost* mutable_queryhost();
  void set_allocated_queryhost(::BigPack::CsQueryHost* queryhost);
  private:
  const ::BigPack::CsQueryHost& _internal_queryhost() const;
  ::BigPack::CsQueryHost* _internal_mutable_queryhost();
  public:
  void unsafe_arena_set_allocated_queryhost(
      ::BigPack::CsQueryHost* queryhost);
  ::BigPack::CsQueryHost* unsafe_arena_release_queryhost();

  // .BigPack.ScReplyQuery replyQuery = 7;
  bool has_replyquery() const;
  private:
  bool _internal_has_replyquery() const;
  public:
  void clear_replyquery();
  const ::BigPack::ScReplyQuery& replyquery() const;
  ::BigPack::ScReplyQuery* release_replyquery();
  ::BigPack::ScReplyQuery* mutable_replyquery();
  void set_allocated_replyquery(::BigPack::ScReplyQuery* replyquery);
  private:
  const ::BigPack::ScReplyQuery& _internal_replyquery() const;
  ::BigPack::ScReplyQuery* _internal_mutable_replyquery();
  public:
  void unsafe_arena_set_allocated_replyquery(
      ::BigPack::ScReplyQuery* replyquery);
  ::BigPack::ScReplyQuery* unsafe_arena_release_replyquery();

  // .BigPack.CCRequestAuth requestAuth = 8;
  bool has_requestauth() const;
  private:
  bool _internal_has_requestauth() const;
  public:
  void clear_requestauth();
  const ::BigPack::CCRequestAuth& requestauth() const;
  ::BigPack::CCRequestAuth* release_requestauth();
  ::BigPack::CCRequestAuth* mutable_requestauth();
  void set_allocated_requestauth(::BigPack::CCRequestAuth* requestauth);
  private:
  const ::BigPack::CCRequestAuth& _internal_requestauth() const;
  ::BigPack::CCRequestAuth* _internal_mutable_requestauth();
  public:
  void unsafe_arena_set_allocated_requestauth(
      ::BigPack::CCRequestAuth* requestauth);
  ::BigPack::CCRequestAuth* unsafe_arena_release_requestauth();

  // .BigPack.CCResponseAuth responseAuth = 9;
  bool has_responseauth() const;
  private:
  bool _internal_has_responseauth() const;
  public:
  void clear_responseauth();
  const ::BigPack::CCResponseAuth& responseauth() const;
  ::BigPack::CCResponseAuth* release_responseauth();
  ::BigPack::CCResponseAuth* mutable_responseauth();
  void set_allocated_responseauth(::BigPack::CCResponseAuth* responseauth);
  private:
  const ::BigPack::CCResponseAuth& _internal_responseauth() const;
  ::BigPack::CCResponseAuth* _internal_mutable_responseauth();
  public:
  void unsafe_arena_set_allocated_responseauth(
      ::BigPack::CCResponseAuth* responseauth);
  ::BigPack::CCResponseAuth* unsafe_arena_release_responseauth();

  // .BigPack.CCGetDesktop getDesktop = 10;
  bool has_getdesktop() const;
  private:
  bool _internal_has_getdesktop() const;
  public:
  void clear_getdesktop();
  const ::BigPack::CCGetDesktop& getdesktop() const;
  ::BigPack::CCGetDesktop* release_getdesktop();
  ::BigPack::CCGetDesktop* mutable_getdesktop();
  void set_allocated_getdesktop(::BigPack::CCGetDesktop* getdesktop);
  private:
  const ::BigPack::CCGetDesktop& _internal_getdesktop() const;
  ::BigPack::CCGetDesktop* _internal_mutable_getdesktop();
  public:
  void unsafe_arena_set_allocated_getdesktop(
      ::BigPack::CCGetDesktop* getdesktop);
  ::BigPack::CCGetDesktop* unsafe_arena_release_getdesktop();

  // .BigPack.CCGiveImgParameters imgParameters = 11;
  bool has_imgparameters() const;
  private:
  bool _internal_has_imgparameters() const;
  public:
  void clear_imgparameters();
  const ::BigPack::CCGiveImgParameters& imgparameters() const;
  ::BigPack::CCGiveImgParameters* release_imgparameters();
  ::BigPack::CCGiveImgParameters* mutable_imgparameters();
  void set_allocated_imgparameters(::BigPack::CCGiveImgParameters* imgparameters);
  private:
  const ::BigPack::CCGiveImgParameters& _internal_imgparameters() const;
  ::BigPack::CCGiveImgParameters* _internal_mutable_imgparameters();
  public:
  void unsafe_arena_set_allocated_imgparameters(
      ::BigPack::CCGiveImgParameters* imgparameters);
  ::BigPack::CCGiveImgParameters* unsafe_arena_release_imgparameters();

  // .BigPack.CCGiveImg img = 12;
  bool has_img() const;
  private:
  bool _internal_has_img() const;
  public:
  void clear_img();
  const ::BigPack::CCGiveImg& img() const;
  ::BigPack::CCGiveImg* release_img();
  ::BigPack::CCGiveImg* mutable_img();
  void set_allocated_img(::BigPack::CCGiveImg* img);
  private:
  const ::BigPack::CCGiveImg& _internal_img() const;
  ::BigPack::CCGiveImg* _internal_mutable_img();
  public:
  void unsafe_arena_set_allocated_img(
      ::BigPack::CCGiveImg* img);
  ::BigPack::CCGiveImg* unsafe_arena_release_img();

  // .BigPack.APTileReceived tileReceived = 13;
  bool has_tilereceived() const;
  private:
  bool _internal_has_tilereceived() const;
  public:
  void clear_tilereceived();
  const ::BigPack::APTileReceived& tilereceived() const;
  ::BigPack::APTileReceived* release_tilereceived();
  ::BigPack::APTileReceived* mutable_tilereceived();
  void set_allocated_tilereceived(::BigPack::APTileReceived* tilereceived);
  private:
  const ::BigPack::APTileReceived& _internal_tilereceived() const;
  ::BigPack::APTileReceived* _internal_mutable_tilereceived();
  public:
  void unsafe_arena_set_allocated_tilereceived(
      ::BigPack::APTileReceived* tilereceived);
  ::BigPack::APTileReceived* unsafe_arena_release_tilereceived();

  // .BigPack.APMouseMove mouseMove = 14;
  bool has_mousemove() const;
  private:
  bool _internal_has_mousemove() const;
  public:
  void clear_mousemove();
  const ::BigPack::APMouseMove& mousemove() const;
  ::BigPack::APMouseMove* release_mousemove();
  ::BigPack::APMouseMove* mutable_mousemove();
  void set_allocated_mousemove(::BigPack::APMouseMove* mousemove);
  private:
  const ::BigPack::APMouseMove& _internal_mousemove() const;
  ::BigPack::APMouseMove* _internal_mutable_mousemove();
  public:
  void unsafe_arena_set_allocated_mousemove(
      ::BigPack::APMouseMove* mousemove);
  ::BigPack::APMouseMove* unsafe_arena_release_mousemove();

  void clear_dataBody();
  DataBodyCase dataBody_case() const;
  // @@protoc_insertion_point(class_scope:BigPack.Exchange)
 private:
  class _Internal;
  void set_has_hostinfo();
  void set_has_replyinfo();
  void set_has_queryhost();
  void set_has_replyquery();
  void set_has_requestauth();
  void set_has_responseauth();
  void set_has_getdesktop();
  void set_has_imgparameters();
  void set_has_img();
  void set_has_tilereceived();
  void set_has_mousemove();

  inline bool has_dataBody() const;
  inline void clear_has_dataBody();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resourceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetid_;
  int datatype_;
  union DataBodyUnion {
    constexpr DataBodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::BigPack::CsRegisterHost* hostinfo_;
    ::BigPack::ScReplyRegister* replyinfo_;
    ::BigPack::CsQueryHost* queryhost_;
    ::BigPack::ScReplyQuery* replyquery_;
    ::BigPack::CCRequestAuth* requestauth_;
    ::BigPack::CCResponseAuth* responseauth_;
    ::BigPack::CCGetDesktop* getdesktop_;
    ::BigPack::CCGiveImgParameters* imgparameters_;
    ::BigPack::CCGiveImg* img_;
    ::BigPack::APTileReceived* tilereceived_;
    ::BigPack::APMouseMove* mousemove_;
  } dataBody_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class WMHeartbeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.WMHeartbeat) */ {
 public:
  inline WMHeartbeat() : WMHeartbeat(nullptr) {}
  ~WMHeartbeat() override;
  explicit constexpr WMHeartbeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WMHeartbeat(const WMHeartbeat& from);
  WMHeartbeat(WMHeartbeat&& from) noexcept
    : WMHeartbeat() {
    *this = ::std::move(from);
  }

  inline WMHeartbeat& operator=(const WMHeartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline WMHeartbeat& operator=(WMHeartbeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WMHeartbeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const WMHeartbeat* internal_default_instance() {
    return reinterpret_cast<const WMHeartbeat*>(
               &_WMHeartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WMHeartbeat& a, WMHeartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(WMHeartbeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WMHeartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WMHeartbeat* New() const final {
    return CreateMaybeMessage<WMHeartbeat>(nullptr);
  }

  WMHeartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WMHeartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WMHeartbeat& from);
  void MergeFrom(const WMHeartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WMHeartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.WMHeartbeat";
  }
  protected:
  explicit WMHeartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BigPack.WMHeartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class CsRegisterHost PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.CsRegisterHost) */ {
 public:
  inline CsRegisterHost() : CsRegisterHost(nullptr) {}
  ~CsRegisterHost() override;
  explicit constexpr CsRegisterHost(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CsRegisterHost(const CsRegisterHost& from);
  CsRegisterHost(CsRegisterHost&& from) noexcept
    : CsRegisterHost() {
    *this = ::std::move(from);
  }

  inline CsRegisterHost& operator=(const CsRegisterHost& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsRegisterHost& operator=(CsRegisterHost&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsRegisterHost& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsRegisterHost* internal_default_instance() {
    return reinterpret_cast<const CsRegisterHost*>(
               &_CsRegisterHost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CsRegisterHost& a, CsRegisterHost& b) {
    a.Swap(&b);
  }
  inline void Swap(CsRegisterHost* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsRegisterHost* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CsRegisterHost* New() const final {
    return CreateMaybeMessage<CsRegisterHost>(nullptr);
  }

  CsRegisterHost* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CsRegisterHost>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CsRegisterHost& from);
  void MergeFrom(const CsRegisterHost& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsRegisterHost* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.CsRegisterHost";
  }
  protected:
  explicit CsRegisterHost(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuIDFieldNumber = 1,
    kDeviceIDFieldNumber = 2,
    kMacFieldNumber = 3,
    kUniqueIDFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // string cpuID = 1;
  void clear_cpuid();
  const std::string& cpuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpuid();
  std::string* release_cpuid();
  void set_allocated_cpuid(std::string* cpuid);
  private:
  const std::string& _internal_cpuid() const;
  void _internal_set_cpuid(const std::string& value);
  std::string* _internal_mutable_cpuid();
  public:

  // string deviceID = 2;
  void clear_deviceid();
  const std::string& deviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // string mac = 3;
  void clear_mac();
  const std::string& mac() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac();
  std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // string uniqueID = 4;
  void clear_uniqueid();
  const std::string& uniqueid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uniqueid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uniqueid();
  std::string* release_uniqueid();
  void set_allocated_uniqueid(std::string* uniqueid);
  private:
  const std::string& _internal_uniqueid() const;
  void _internal_set_uniqueid(const std::string& value);
  std::string* _internal_mutable_uniqueid();
  public:

  // int32 type = 5;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BigPack.CsRegisterHost)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uniqueid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class ScReplyRegister PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.ScReplyRegister) */ {
 public:
  inline ScReplyRegister() : ScReplyRegister(nullptr) {}
  ~ScReplyRegister() override;
  explicit constexpr ScReplyRegister(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScReplyRegister(const ScReplyRegister& from);
  ScReplyRegister(ScReplyRegister&& from) noexcept
    : ScReplyRegister() {
    *this = ::std::move(from);
  }

  inline ScReplyRegister& operator=(const ScReplyRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScReplyRegister& operator=(ScReplyRegister&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScReplyRegister& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScReplyRegister* internal_default_instance() {
    return reinterpret_cast<const ScReplyRegister*>(
               &_ScReplyRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ScReplyRegister& a, ScReplyRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(ScReplyRegister* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScReplyRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScReplyRegister* New() const final {
    return CreateMaybeMessage<ScReplyRegister>(nullptr);
  }

  ScReplyRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScReplyRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScReplyRegister& from);
  void MergeFrom(const ScReplyRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScReplyRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.ScReplyRegister";
  }
  protected:
  explicit ScReplyRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegisterIdFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string registerId = 2;
  void clear_registerid();
  const std::string& registerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_registerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_registerid();
  std::string* release_registerid();
  void set_allocated_registerid(std::string* registerid);
  private:
  const std::string& _internal_registerid() const;
  void _internal_set_registerid(const std::string& value);
  std::string* _internal_mutable_registerid();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BigPack.ScReplyRegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr registerid_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class CsQueryHost PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.CsQueryHost) */ {
 public:
  inline CsQueryHost() : CsQueryHost(nullptr) {}
  ~CsQueryHost() override;
  explicit constexpr CsQueryHost(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CsQueryHost(const CsQueryHost& from);
  CsQueryHost(CsQueryHost&& from) noexcept
    : CsQueryHost() {
    *this = ::std::move(from);
  }

  inline CsQueryHost& operator=(const CsQueryHost& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsQueryHost& operator=(CsQueryHost&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsQueryHost& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsQueryHost* internal_default_instance() {
    return reinterpret_cast<const CsQueryHost*>(
               &_CsQueryHost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CsQueryHost& a, CsQueryHost& b) {
    a.Swap(&b);
  }
  inline void Swap(CsQueryHost* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsQueryHost* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CsQueryHost* New() const final {
    return CreateMaybeMessage<CsQueryHost>(nullptr);
  }

  CsQueryHost* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CsQueryHost>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CsQueryHost& from);
  void MergeFrom(const CsQueryHost& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsQueryHost* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.CsQueryHost";
  }
  protected:
  explicit CsQueryHost(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BigPack.CsQueryHost)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class ScReplyQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.ScReplyQuery) */ {
 public:
  inline ScReplyQuery() : ScReplyQuery(nullptr) {}
  ~ScReplyQuery() override;
  explicit constexpr ScReplyQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScReplyQuery(const ScReplyQuery& from);
  ScReplyQuery(ScReplyQuery&& from) noexcept
    : ScReplyQuery() {
    *this = ::std::move(from);
  }

  inline ScReplyQuery& operator=(const ScReplyQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScReplyQuery& operator=(ScReplyQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScReplyQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScReplyQuery* internal_default_instance() {
    return reinterpret_cast<const ScReplyQuery*>(
               &_ScReplyQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ScReplyQuery& a, ScReplyQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(ScReplyQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScReplyQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScReplyQuery* New() const final {
    return CreateMaybeMessage<ScReplyQuery>(nullptr);
  }

  ScReplyQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScReplyQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScReplyQuery& from);
  void MergeFrom(const ScReplyQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScReplyQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.ScReplyQuery";
  }
  protected:
  explicit ScReplyQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryMessageFieldNumber = 2,
    kIfExitHostFieldNumber = 1,
  };
  // string queryMessage = 2;
  void clear_querymessage();
  const std::string& querymessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_querymessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_querymessage();
  std::string* release_querymessage();
  void set_allocated_querymessage(std::string* querymessage);
  private:
  const std::string& _internal_querymessage() const;
  void _internal_set_querymessage(const std::string& value);
  std::string* _internal_mutable_querymessage();
  public:

  // bool ifExitHost = 1;
  void clear_ifexithost();
  bool ifexithost() const;
  void set_ifexithost(bool value);
  private:
  bool _internal_ifexithost() const;
  void _internal_set_ifexithost(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BigPack.ScReplyQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr querymessage_;
  bool ifexithost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class CCRequestAuth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.CCRequestAuth) */ {
 public:
  inline CCRequestAuth() : CCRequestAuth(nullptr) {}
  ~CCRequestAuth() override;
  explicit constexpr CCRequestAuth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCRequestAuth(const CCRequestAuth& from);
  CCRequestAuth(CCRequestAuth&& from) noexcept
    : CCRequestAuth() {
    *this = ::std::move(from);
  }

  inline CCRequestAuth& operator=(const CCRequestAuth& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCRequestAuth& operator=(CCRequestAuth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCRequestAuth& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCRequestAuth* internal_default_instance() {
    return reinterpret_cast<const CCRequestAuth*>(
               &_CCRequestAuth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CCRequestAuth& a, CCRequestAuth& b) {
    a.Swap(&b);
  }
  inline void Swap(CCRequestAuth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCRequestAuth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCRequestAuth* New() const final {
    return CreateMaybeMessage<CCRequestAuth>(nullptr);
  }

  CCRequestAuth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCRequestAuth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCRequestAuth& from);
  void MergeFrom(const CCRequestAuth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCRequestAuth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.CCRequestAuth";
  }
  protected:
  explicit CCRequestAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthPassFieldNumber = 1,
  };
  // string authPass = 1;
  void clear_authpass();
  const std::string& authpass() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authpass(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authpass();
  std::string* release_authpass();
  void set_allocated_authpass(std::string* authpass);
  private:
  const std::string& _internal_authpass() const;
  void _internal_set_authpass(const std::string& value);
  std::string* _internal_mutable_authpass();
  public:

  // @@protoc_insertion_point(class_scope:BigPack.CCRequestAuth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authpass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class CCResponseAuth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.CCResponseAuth) */ {
 public:
  inline CCResponseAuth() : CCResponseAuth(nullptr) {}
  ~CCResponseAuth() override;
  explicit constexpr CCResponseAuth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCResponseAuth(const CCResponseAuth& from);
  CCResponseAuth(CCResponseAuth&& from) noexcept
    : CCResponseAuth() {
    *this = ::std::move(from);
  }

  inline CCResponseAuth& operator=(const CCResponseAuth& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCResponseAuth& operator=(CCResponseAuth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCResponseAuth& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCResponseAuth* internal_default_instance() {
    return reinterpret_cast<const CCResponseAuth*>(
               &_CCResponseAuth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CCResponseAuth& a, CCResponseAuth& b) {
    a.Swap(&b);
  }
  inline void Swap(CCResponseAuth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCResponseAuth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCResponseAuth* New() const final {
    return CreateMaybeMessage<CCResponseAuth>(nullptr);
  }

  CCResponseAuth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCResponseAuth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCResponseAuth& from);
  void MergeFrom(const CCResponseAuth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCResponseAuth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.CCResponseAuth";
  }
  protected:
  explicit CCResponseAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string info = 2;
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BigPack.CCResponseAuth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class CCGetDesktop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.CCGetDesktop) */ {
 public:
  inline CCGetDesktop() : CCGetDesktop(nullptr) {}
  ~CCGetDesktop() override;
  explicit constexpr CCGetDesktop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCGetDesktop(const CCGetDesktop& from);
  CCGetDesktop(CCGetDesktop&& from) noexcept
    : CCGetDesktop() {
    *this = ::std::move(from);
  }

  inline CCGetDesktop& operator=(const CCGetDesktop& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCGetDesktop& operator=(CCGetDesktop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCGetDesktop& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCGetDesktop* internal_default_instance() {
    return reinterpret_cast<const CCGetDesktop*>(
               &_CCGetDesktop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CCGetDesktop& a, CCGetDesktop& b) {
    a.Swap(&b);
  }
  inline void Swap(CCGetDesktop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCGetDesktop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCGetDesktop* New() const final {
    return CreateMaybeMessage<CCGetDesktop>(nullptr);
  }

  CCGetDesktop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCGetDesktop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCGetDesktop& from);
  void MergeFrom(const CCGetDesktop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCGetDesktop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.CCGetDesktop";
  }
  protected:
  explicit CCGetDesktop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BigPack.CCGetDesktop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class CCGiveImgParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.CCGiveImgParameters) */ {
 public:
  inline CCGiveImgParameters() : CCGiveImgParameters(nullptr) {}
  ~CCGiveImgParameters() override;
  explicit constexpr CCGiveImgParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCGiveImgParameters(const CCGiveImgParameters& from);
  CCGiveImgParameters(CCGiveImgParameters&& from) noexcept
    : CCGiveImgParameters() {
    *this = ::std::move(from);
  }

  inline CCGiveImgParameters& operator=(const CCGiveImgParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCGiveImgParameters& operator=(CCGiveImgParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCGiveImgParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCGiveImgParameters* internal_default_instance() {
    return reinterpret_cast<const CCGiveImgParameters*>(
               &_CCGiveImgParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CCGiveImgParameters& a, CCGiveImgParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(CCGiveImgParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCGiveImgParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCGiveImgParameters* New() const final {
    return CreateMaybeMessage<CCGiveImgParameters>(nullptr);
  }

  CCGiveImgParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCGiveImgParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCGiveImgParameters& from);
  void MergeFrom(const CCGiveImgParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCGiveImgParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.CCGiveImgParameters";
  }
  protected:
  explicit CCGiveImgParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kRectWidthFieldNumber = 3,
  };
  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rectWidth = 3;
  void clear_rectwidth();
  ::PROTOBUF_NAMESPACE_ID::int32 rectwidth() const;
  void set_rectwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rectwidth() const;
  void _internal_set_rectwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BigPack.CCGiveImgParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 rectwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class CCGiveImg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.CCGiveImg) */ {
 public:
  inline CCGiveImg() : CCGiveImg(nullptr) {}
  ~CCGiveImg() override;
  explicit constexpr CCGiveImg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCGiveImg(const CCGiveImg& from);
  CCGiveImg(CCGiveImg&& from) noexcept
    : CCGiveImg() {
    *this = ::std::move(from);
  }

  inline CCGiveImg& operator=(const CCGiveImg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCGiveImg& operator=(CCGiveImg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCGiveImg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCGiveImg* internal_default_instance() {
    return reinterpret_cast<const CCGiveImg*>(
               &_CCGiveImg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CCGiveImg& a, CCGiveImg& b) {
    a.Swap(&b);
  }
  inline void Swap(CCGiveImg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCGiveImg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCGiveImg* New() const final {
    return CreateMaybeMessage<CCGiveImg>(nullptr);
  }

  CCGiveImg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCGiveImg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCGiveImg& from);
  void MergeFrom(const CCGiveImg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCGiveImg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.CCGiveImg";
  }
  protected:
  explicit CCGiveImg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgDataFieldNumber = 4,
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kTileNumFieldNumber = 3,
  };
  // bytes imgData = 4;
  void clear_imgdata();
  const std::string& imgdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imgdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imgdata();
  std::string* release_imgdata();
  void set_allocated_imgdata(std::string* imgdata);
  private:
  const std::string& _internal_imgdata() const;
  void _internal_set_imgdata(const std::string& value);
  std::string* _internal_mutable_imgdata();
  public:

  // int32 posX = 1;
  void clear_posx();
  ::PROTOBUF_NAMESPACE_ID::int32 posx() const;
  void set_posx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_posx() const;
  void _internal_set_posx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 posY = 2;
  void clear_posy();
  ::PROTOBUF_NAMESPACE_ID::int32 posy() const;
  void set_posy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_posy() const;
  void _internal_set_posy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tileNum = 3;
  void clear_tilenum();
  ::PROTOBUF_NAMESPACE_ID::int32 tilenum() const;
  void set_tilenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tilenum() const;
  void _internal_set_tilenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BigPack.CCGiveImg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imgdata_;
  ::PROTOBUF_NAMESPACE_ID::int32 posx_;
  ::PROTOBUF_NAMESPACE_ID::int32 posy_;
  ::PROTOBUF_NAMESPACE_ID::int32 tilenum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class APTileReceived PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.APTileReceived) */ {
 public:
  inline APTileReceived() : APTileReceived(nullptr) {}
  ~APTileReceived() override;
  explicit constexpr APTileReceived(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  APTileReceived(const APTileReceived& from);
  APTileReceived(APTileReceived&& from) noexcept
    : APTileReceived() {
    *this = ::std::move(from);
  }

  inline APTileReceived& operator=(const APTileReceived& from) {
    CopyFrom(from);
    return *this;
  }
  inline APTileReceived& operator=(APTileReceived&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const APTileReceived& default_instance() {
    return *internal_default_instance();
  }
  static inline const APTileReceived* internal_default_instance() {
    return reinterpret_cast<const APTileReceived*>(
               &_APTileReceived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(APTileReceived& a, APTileReceived& b) {
    a.Swap(&b);
  }
  inline void Swap(APTileReceived* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(APTileReceived* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline APTileReceived* New() const final {
    return CreateMaybeMessage<APTileReceived>(nullptr);
  }

  APTileReceived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<APTileReceived>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const APTileReceived& from);
  void MergeFrom(const APTileReceived& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(APTileReceived* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.APTileReceived";
  }
  protected:
  explicit APTileReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileNumFieldNumber = 1,
  };
  // int32 tileNum = 1;
  void clear_tilenum();
  ::PROTOBUF_NAMESPACE_ID::int32 tilenum() const;
  void set_tilenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tilenum() const;
  void _internal_set_tilenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BigPack.APTileReceived)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 tilenum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// -------------------------------------------------------------------

class APMouseMove PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BigPack.APMouseMove) */ {
 public:
  inline APMouseMove() : APMouseMove(nullptr) {}
  ~APMouseMove() override;
  explicit constexpr APMouseMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  APMouseMove(const APMouseMove& from);
  APMouseMove(APMouseMove&& from) noexcept
    : APMouseMove() {
    *this = ::std::move(from);
  }

  inline APMouseMove& operator=(const APMouseMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline APMouseMove& operator=(APMouseMove&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const APMouseMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const APMouseMove* internal_default_instance() {
    return reinterpret_cast<const APMouseMove*>(
               &_APMouseMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(APMouseMove& a, APMouseMove& b) {
    a.Swap(&b);
  }
  inline void Swap(APMouseMove* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(APMouseMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline APMouseMove* New() const final {
    return CreateMaybeMessage<APMouseMove>(nullptr);
  }

  APMouseMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<APMouseMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const APMouseMove& from);
  void MergeFrom(const APMouseMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(APMouseMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BigPack.APMouseMove";
  }
  protected:
  explicit APMouseMove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointXFieldNumber = 1,
    kPointYFieldNumber = 2,
  };
  // int32 pointX = 1;
  void clear_pointx();
  ::PROTOBUF_NAMESPACE_ID::int32 pointx() const;
  void set_pointx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pointx() const;
  void _internal_set_pointx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pointY = 2;
  void clear_pointy();
  ::PROTOBUF_NAMESPACE_ID::int32 pointy() const;
  void set_pointy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pointy() const;
  void _internal_set_pointy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BigPack.APMouseMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 pointx_;
  ::PROTOBUF_NAMESPACE_ID::int32 pointy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Exchange_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Exchange

// .BigPack.Exchange.DataType dataType = 1;
inline void Exchange::clear_datatype() {
  datatype_ = 0;
}
inline ::BigPack::Exchange_DataType Exchange::_internal_datatype() const {
  return static_cast< ::BigPack::Exchange_DataType >(datatype_);
}
inline ::BigPack::Exchange_DataType Exchange::datatype() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.dataType)
  return _internal_datatype();
}
inline void Exchange::_internal_set_datatype(::BigPack::Exchange_DataType value) {
  
  datatype_ = value;
}
inline void Exchange::set_datatype(::BigPack::Exchange_DataType value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:BigPack.Exchange.dataType)
}

// string resourceID = 2;
inline void Exchange::clear_resourceid() {
  resourceid_.ClearToEmpty();
}
inline const std::string& Exchange::resourceid() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.resourceID)
  return _internal_resourceid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Exchange::set_resourceid(ArgT0&& arg0, ArgT... args) {
 
 resourceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.Exchange.resourceID)
}
inline std::string* Exchange::mutable_resourceid() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.resourceID)
  return _internal_mutable_resourceid();
}
inline const std::string& Exchange::_internal_resourceid() const {
  return resourceid_.Get();
}
inline void Exchange::_internal_set_resourceid(const std::string& value) {
  
  resourceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Exchange::_internal_mutable_resourceid() {
  
  return resourceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Exchange::release_resourceid() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.resourceID)
  return resourceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Exchange::set_allocated_resourceid(std::string* resourceid) {
  if (resourceid != nullptr) {
    
  } else {
    
  }
  resourceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resourceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.resourceID)
}

// string targetID = 3;
inline void Exchange::clear_targetid() {
  targetid_.ClearToEmpty();
}
inline const std::string& Exchange::targetid() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.targetID)
  return _internal_targetid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void Exchange::set_targetid(ArgT0&& arg0, ArgT... args) {
 
 targetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.Exchange.targetID)
}
inline std::string* Exchange::mutable_targetid() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.targetID)
  return _internal_mutable_targetid();
}
inline const std::string& Exchange::_internal_targetid() const {
  return targetid_.Get();
}
inline void Exchange::_internal_set_targetid(const std::string& value) {
  
  targetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* Exchange::_internal_mutable_targetid() {
  
  return targetid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Exchange::release_targetid() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.targetID)
  return targetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Exchange::set_allocated_targetid(std::string* targetid) {
  if (targetid != nullptr) {
    
  } else {
    
  }
  targetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.Exchange.targetID)
}

// .BigPack.CsRegisterHost hostInfo = 4;
inline bool Exchange::_internal_has_hostinfo() const {
  return dataBody_case() == kHostInfo;
}
inline bool Exchange::has_hostinfo() const {
  return _internal_has_hostinfo();
}
inline void Exchange::set_has_hostinfo() {
  _oneof_case_[0] = kHostInfo;
}
inline void Exchange::clear_hostinfo() {
  if (_internal_has_hostinfo()) {
    if (GetArena() == nullptr) {
      delete dataBody_.hostinfo_;
    }
    clear_has_dataBody();
  }
}
inline ::BigPack::CsRegisterHost* Exchange::release_hostinfo() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.hostInfo)
  if (_internal_has_hostinfo()) {
    clear_has_dataBody();
      ::BigPack::CsRegisterHost* temp = dataBody_.hostinfo_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dataBody_.hostinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BigPack::CsRegisterHost& Exchange::_internal_hostinfo() const {
  return _internal_has_hostinfo()
      ? *dataBody_.hostinfo_
      : reinterpret_cast< ::BigPack::CsRegisterHost&>(::BigPack::_CsRegisterHost_default_instance_);
}
inline const ::BigPack::CsRegisterHost& Exchange::hostinfo() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.hostInfo)
  return _internal_hostinfo();
}
inline ::BigPack::CsRegisterHost* Exchange::unsafe_arena_release_hostinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BigPack.Exchange.hostInfo)
  if (_internal_has_hostinfo()) {
    clear_has_dataBody();
    ::BigPack::CsRegisterHost* temp = dataBody_.hostinfo_;
    dataBody_.hostinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Exchange::unsafe_arena_set_allocated_hostinfo(::BigPack::CsRegisterHost* hostinfo) {
  clear_dataBody();
  if (hostinfo) {
    set_has_hostinfo();
    dataBody_.hostinfo_ = hostinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BigPack.Exchange.hostInfo)
}
inline ::BigPack::CsRegisterHost* Exchange::_internal_mutable_hostinfo() {
  if (!_internal_has_hostinfo()) {
    clear_dataBody();
    set_has_hostinfo();
    dataBody_.hostinfo_ = CreateMaybeMessage< ::BigPack::CsRegisterHost >(GetArena());
  }
  return dataBody_.hostinfo_;
}
inline ::BigPack::CsRegisterHost* Exchange::mutable_hostinfo() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.hostInfo)
  return _internal_mutable_hostinfo();
}

// .BigPack.ScReplyRegister replyInfo = 5;
inline bool Exchange::_internal_has_replyinfo() const {
  return dataBody_case() == kReplyInfo;
}
inline bool Exchange::has_replyinfo() const {
  return _internal_has_replyinfo();
}
inline void Exchange::set_has_replyinfo() {
  _oneof_case_[0] = kReplyInfo;
}
inline void Exchange::clear_replyinfo() {
  if (_internal_has_replyinfo()) {
    if (GetArena() == nullptr) {
      delete dataBody_.replyinfo_;
    }
    clear_has_dataBody();
  }
}
inline ::BigPack::ScReplyRegister* Exchange::release_replyinfo() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.replyInfo)
  if (_internal_has_replyinfo()) {
    clear_has_dataBody();
      ::BigPack::ScReplyRegister* temp = dataBody_.replyinfo_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dataBody_.replyinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BigPack::ScReplyRegister& Exchange::_internal_replyinfo() const {
  return _internal_has_replyinfo()
      ? *dataBody_.replyinfo_
      : reinterpret_cast< ::BigPack::ScReplyRegister&>(::BigPack::_ScReplyRegister_default_instance_);
}
inline const ::BigPack::ScReplyRegister& Exchange::replyinfo() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.replyInfo)
  return _internal_replyinfo();
}
inline ::BigPack::ScReplyRegister* Exchange::unsafe_arena_release_replyinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BigPack.Exchange.replyInfo)
  if (_internal_has_replyinfo()) {
    clear_has_dataBody();
    ::BigPack::ScReplyRegister* temp = dataBody_.replyinfo_;
    dataBody_.replyinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Exchange::unsafe_arena_set_allocated_replyinfo(::BigPack::ScReplyRegister* replyinfo) {
  clear_dataBody();
  if (replyinfo) {
    set_has_replyinfo();
    dataBody_.replyinfo_ = replyinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BigPack.Exchange.replyInfo)
}
inline ::BigPack::ScReplyRegister* Exchange::_internal_mutable_replyinfo() {
  if (!_internal_has_replyinfo()) {
    clear_dataBody();
    set_has_replyinfo();
    dataBody_.replyinfo_ = CreateMaybeMessage< ::BigPack::ScReplyRegister >(GetArena());
  }
  return dataBody_.replyinfo_;
}
inline ::BigPack::ScReplyRegister* Exchange::mutable_replyinfo() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.replyInfo)
  return _internal_mutable_replyinfo();
}

// .BigPack.CsQueryHost queryHost = 6;
inline bool Exchange::_internal_has_queryhost() const {
  return dataBody_case() == kQueryHost;
}
inline bool Exchange::has_queryhost() const {
  return _internal_has_queryhost();
}
inline void Exchange::set_has_queryhost() {
  _oneof_case_[0] = kQueryHost;
}
inline void Exchange::clear_queryhost() {
  if (_internal_has_queryhost()) {
    if (GetArena() == nullptr) {
      delete dataBody_.queryhost_;
    }
    clear_has_dataBody();
  }
}
inline ::BigPack::CsQueryHost* Exchange::release_queryhost() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.queryHost)
  if (_internal_has_queryhost()) {
    clear_has_dataBody();
      ::BigPack::CsQueryHost* temp = dataBody_.queryhost_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dataBody_.queryhost_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BigPack::CsQueryHost& Exchange::_internal_queryhost() const {
  return _internal_has_queryhost()
      ? *dataBody_.queryhost_
      : reinterpret_cast< ::BigPack::CsQueryHost&>(::BigPack::_CsQueryHost_default_instance_);
}
inline const ::BigPack::CsQueryHost& Exchange::queryhost() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.queryHost)
  return _internal_queryhost();
}
inline ::BigPack::CsQueryHost* Exchange::unsafe_arena_release_queryhost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BigPack.Exchange.queryHost)
  if (_internal_has_queryhost()) {
    clear_has_dataBody();
    ::BigPack::CsQueryHost* temp = dataBody_.queryhost_;
    dataBody_.queryhost_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Exchange::unsafe_arena_set_allocated_queryhost(::BigPack::CsQueryHost* queryhost) {
  clear_dataBody();
  if (queryhost) {
    set_has_queryhost();
    dataBody_.queryhost_ = queryhost;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BigPack.Exchange.queryHost)
}
inline ::BigPack::CsQueryHost* Exchange::_internal_mutable_queryhost() {
  if (!_internal_has_queryhost()) {
    clear_dataBody();
    set_has_queryhost();
    dataBody_.queryhost_ = CreateMaybeMessage< ::BigPack::CsQueryHost >(GetArena());
  }
  return dataBody_.queryhost_;
}
inline ::BigPack::CsQueryHost* Exchange::mutable_queryhost() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.queryHost)
  return _internal_mutable_queryhost();
}

// .BigPack.ScReplyQuery replyQuery = 7;
inline bool Exchange::_internal_has_replyquery() const {
  return dataBody_case() == kReplyQuery;
}
inline bool Exchange::has_replyquery() const {
  return _internal_has_replyquery();
}
inline void Exchange::set_has_replyquery() {
  _oneof_case_[0] = kReplyQuery;
}
inline void Exchange::clear_replyquery() {
  if (_internal_has_replyquery()) {
    if (GetArena() == nullptr) {
      delete dataBody_.replyquery_;
    }
    clear_has_dataBody();
  }
}
inline ::BigPack::ScReplyQuery* Exchange::release_replyquery() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.replyQuery)
  if (_internal_has_replyquery()) {
    clear_has_dataBody();
      ::BigPack::ScReplyQuery* temp = dataBody_.replyquery_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dataBody_.replyquery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BigPack::ScReplyQuery& Exchange::_internal_replyquery() const {
  return _internal_has_replyquery()
      ? *dataBody_.replyquery_
      : reinterpret_cast< ::BigPack::ScReplyQuery&>(::BigPack::_ScReplyQuery_default_instance_);
}
inline const ::BigPack::ScReplyQuery& Exchange::replyquery() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.replyQuery)
  return _internal_replyquery();
}
inline ::BigPack::ScReplyQuery* Exchange::unsafe_arena_release_replyquery() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BigPack.Exchange.replyQuery)
  if (_internal_has_replyquery()) {
    clear_has_dataBody();
    ::BigPack::ScReplyQuery* temp = dataBody_.replyquery_;
    dataBody_.replyquery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Exchange::unsafe_arena_set_allocated_replyquery(::BigPack::ScReplyQuery* replyquery) {
  clear_dataBody();
  if (replyquery) {
    set_has_replyquery();
    dataBody_.replyquery_ = replyquery;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BigPack.Exchange.replyQuery)
}
inline ::BigPack::ScReplyQuery* Exchange::_internal_mutable_replyquery() {
  if (!_internal_has_replyquery()) {
    clear_dataBody();
    set_has_replyquery();
    dataBody_.replyquery_ = CreateMaybeMessage< ::BigPack::ScReplyQuery >(GetArena());
  }
  return dataBody_.replyquery_;
}
inline ::BigPack::ScReplyQuery* Exchange::mutable_replyquery() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.replyQuery)
  return _internal_mutable_replyquery();
}

// .BigPack.CCRequestAuth requestAuth = 8;
inline bool Exchange::_internal_has_requestauth() const {
  return dataBody_case() == kRequestAuth;
}
inline bool Exchange::has_requestauth() const {
  return _internal_has_requestauth();
}
inline void Exchange::set_has_requestauth() {
  _oneof_case_[0] = kRequestAuth;
}
inline void Exchange::clear_requestauth() {
  if (_internal_has_requestauth()) {
    if (GetArena() == nullptr) {
      delete dataBody_.requestauth_;
    }
    clear_has_dataBody();
  }
}
inline ::BigPack::CCRequestAuth* Exchange::release_requestauth() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.requestAuth)
  if (_internal_has_requestauth()) {
    clear_has_dataBody();
      ::BigPack::CCRequestAuth* temp = dataBody_.requestauth_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dataBody_.requestauth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BigPack::CCRequestAuth& Exchange::_internal_requestauth() const {
  return _internal_has_requestauth()
      ? *dataBody_.requestauth_
      : reinterpret_cast< ::BigPack::CCRequestAuth&>(::BigPack::_CCRequestAuth_default_instance_);
}
inline const ::BigPack::CCRequestAuth& Exchange::requestauth() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.requestAuth)
  return _internal_requestauth();
}
inline ::BigPack::CCRequestAuth* Exchange::unsafe_arena_release_requestauth() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BigPack.Exchange.requestAuth)
  if (_internal_has_requestauth()) {
    clear_has_dataBody();
    ::BigPack::CCRequestAuth* temp = dataBody_.requestauth_;
    dataBody_.requestauth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Exchange::unsafe_arena_set_allocated_requestauth(::BigPack::CCRequestAuth* requestauth) {
  clear_dataBody();
  if (requestauth) {
    set_has_requestauth();
    dataBody_.requestauth_ = requestauth;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BigPack.Exchange.requestAuth)
}
inline ::BigPack::CCRequestAuth* Exchange::_internal_mutable_requestauth() {
  if (!_internal_has_requestauth()) {
    clear_dataBody();
    set_has_requestauth();
    dataBody_.requestauth_ = CreateMaybeMessage< ::BigPack::CCRequestAuth >(GetArena());
  }
  return dataBody_.requestauth_;
}
inline ::BigPack::CCRequestAuth* Exchange::mutable_requestauth() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.requestAuth)
  return _internal_mutable_requestauth();
}

// .BigPack.CCResponseAuth responseAuth = 9;
inline bool Exchange::_internal_has_responseauth() const {
  return dataBody_case() == kResponseAuth;
}
inline bool Exchange::has_responseauth() const {
  return _internal_has_responseauth();
}
inline void Exchange::set_has_responseauth() {
  _oneof_case_[0] = kResponseAuth;
}
inline void Exchange::clear_responseauth() {
  if (_internal_has_responseauth()) {
    if (GetArena() == nullptr) {
      delete dataBody_.responseauth_;
    }
    clear_has_dataBody();
  }
}
inline ::BigPack::CCResponseAuth* Exchange::release_responseauth() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.responseAuth)
  if (_internal_has_responseauth()) {
    clear_has_dataBody();
      ::BigPack::CCResponseAuth* temp = dataBody_.responseauth_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dataBody_.responseauth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BigPack::CCResponseAuth& Exchange::_internal_responseauth() const {
  return _internal_has_responseauth()
      ? *dataBody_.responseauth_
      : reinterpret_cast< ::BigPack::CCResponseAuth&>(::BigPack::_CCResponseAuth_default_instance_);
}
inline const ::BigPack::CCResponseAuth& Exchange::responseauth() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.responseAuth)
  return _internal_responseauth();
}
inline ::BigPack::CCResponseAuth* Exchange::unsafe_arena_release_responseauth() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BigPack.Exchange.responseAuth)
  if (_internal_has_responseauth()) {
    clear_has_dataBody();
    ::BigPack::CCResponseAuth* temp = dataBody_.responseauth_;
    dataBody_.responseauth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Exchange::unsafe_arena_set_allocated_responseauth(::BigPack::CCResponseAuth* responseauth) {
  clear_dataBody();
  if (responseauth) {
    set_has_responseauth();
    dataBody_.responseauth_ = responseauth;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BigPack.Exchange.responseAuth)
}
inline ::BigPack::CCResponseAuth* Exchange::_internal_mutable_responseauth() {
  if (!_internal_has_responseauth()) {
    clear_dataBody();
    set_has_responseauth();
    dataBody_.responseauth_ = CreateMaybeMessage< ::BigPack::CCResponseAuth >(GetArena());
  }
  return dataBody_.responseauth_;
}
inline ::BigPack::CCResponseAuth* Exchange::mutable_responseauth() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.responseAuth)
  return _internal_mutable_responseauth();
}

// .BigPack.CCGetDesktop getDesktop = 10;
inline bool Exchange::_internal_has_getdesktop() const {
  return dataBody_case() == kGetDesktop;
}
inline bool Exchange::has_getdesktop() const {
  return _internal_has_getdesktop();
}
inline void Exchange::set_has_getdesktop() {
  _oneof_case_[0] = kGetDesktop;
}
inline void Exchange::clear_getdesktop() {
  if (_internal_has_getdesktop()) {
    if (GetArena() == nullptr) {
      delete dataBody_.getdesktop_;
    }
    clear_has_dataBody();
  }
}
inline ::BigPack::CCGetDesktop* Exchange::release_getdesktop() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.getDesktop)
  if (_internal_has_getdesktop()) {
    clear_has_dataBody();
      ::BigPack::CCGetDesktop* temp = dataBody_.getdesktop_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dataBody_.getdesktop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BigPack::CCGetDesktop& Exchange::_internal_getdesktop() const {
  return _internal_has_getdesktop()
      ? *dataBody_.getdesktop_
      : reinterpret_cast< ::BigPack::CCGetDesktop&>(::BigPack::_CCGetDesktop_default_instance_);
}
inline const ::BigPack::CCGetDesktop& Exchange::getdesktop() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.getDesktop)
  return _internal_getdesktop();
}
inline ::BigPack::CCGetDesktop* Exchange::unsafe_arena_release_getdesktop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BigPack.Exchange.getDesktop)
  if (_internal_has_getdesktop()) {
    clear_has_dataBody();
    ::BigPack::CCGetDesktop* temp = dataBody_.getdesktop_;
    dataBody_.getdesktop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Exchange::unsafe_arena_set_allocated_getdesktop(::BigPack::CCGetDesktop* getdesktop) {
  clear_dataBody();
  if (getdesktop) {
    set_has_getdesktop();
    dataBody_.getdesktop_ = getdesktop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BigPack.Exchange.getDesktop)
}
inline ::BigPack::CCGetDesktop* Exchange::_internal_mutable_getdesktop() {
  if (!_internal_has_getdesktop()) {
    clear_dataBody();
    set_has_getdesktop();
    dataBody_.getdesktop_ = CreateMaybeMessage< ::BigPack::CCGetDesktop >(GetArena());
  }
  return dataBody_.getdesktop_;
}
inline ::BigPack::CCGetDesktop* Exchange::mutable_getdesktop() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.getDesktop)
  return _internal_mutable_getdesktop();
}

// .BigPack.CCGiveImgParameters imgParameters = 11;
inline bool Exchange::_internal_has_imgparameters() const {
  return dataBody_case() == kImgParameters;
}
inline bool Exchange::has_imgparameters() const {
  return _internal_has_imgparameters();
}
inline void Exchange::set_has_imgparameters() {
  _oneof_case_[0] = kImgParameters;
}
inline void Exchange::clear_imgparameters() {
  if (_internal_has_imgparameters()) {
    if (GetArena() == nullptr) {
      delete dataBody_.imgparameters_;
    }
    clear_has_dataBody();
  }
}
inline ::BigPack::CCGiveImgParameters* Exchange::release_imgparameters() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.imgParameters)
  if (_internal_has_imgparameters()) {
    clear_has_dataBody();
      ::BigPack::CCGiveImgParameters* temp = dataBody_.imgparameters_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dataBody_.imgparameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BigPack::CCGiveImgParameters& Exchange::_internal_imgparameters() const {
  return _internal_has_imgparameters()
      ? *dataBody_.imgparameters_
      : reinterpret_cast< ::BigPack::CCGiveImgParameters&>(::BigPack::_CCGiveImgParameters_default_instance_);
}
inline const ::BigPack::CCGiveImgParameters& Exchange::imgparameters() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.imgParameters)
  return _internal_imgparameters();
}
inline ::BigPack::CCGiveImgParameters* Exchange::unsafe_arena_release_imgparameters() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BigPack.Exchange.imgParameters)
  if (_internal_has_imgparameters()) {
    clear_has_dataBody();
    ::BigPack::CCGiveImgParameters* temp = dataBody_.imgparameters_;
    dataBody_.imgparameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Exchange::unsafe_arena_set_allocated_imgparameters(::BigPack::CCGiveImgParameters* imgparameters) {
  clear_dataBody();
  if (imgparameters) {
    set_has_imgparameters();
    dataBody_.imgparameters_ = imgparameters;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BigPack.Exchange.imgParameters)
}
inline ::BigPack::CCGiveImgParameters* Exchange::_internal_mutable_imgparameters() {
  if (!_internal_has_imgparameters()) {
    clear_dataBody();
    set_has_imgparameters();
    dataBody_.imgparameters_ = CreateMaybeMessage< ::BigPack::CCGiveImgParameters >(GetArena());
  }
  return dataBody_.imgparameters_;
}
inline ::BigPack::CCGiveImgParameters* Exchange::mutable_imgparameters() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.imgParameters)
  return _internal_mutable_imgparameters();
}

// .BigPack.CCGiveImg img = 12;
inline bool Exchange::_internal_has_img() const {
  return dataBody_case() == kImg;
}
inline bool Exchange::has_img() const {
  return _internal_has_img();
}
inline void Exchange::set_has_img() {
  _oneof_case_[0] = kImg;
}
inline void Exchange::clear_img() {
  if (_internal_has_img()) {
    if (GetArena() == nullptr) {
      delete dataBody_.img_;
    }
    clear_has_dataBody();
  }
}
inline ::BigPack::CCGiveImg* Exchange::release_img() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.img)
  if (_internal_has_img()) {
    clear_has_dataBody();
      ::BigPack::CCGiveImg* temp = dataBody_.img_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dataBody_.img_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BigPack::CCGiveImg& Exchange::_internal_img() const {
  return _internal_has_img()
      ? *dataBody_.img_
      : reinterpret_cast< ::BigPack::CCGiveImg&>(::BigPack::_CCGiveImg_default_instance_);
}
inline const ::BigPack::CCGiveImg& Exchange::img() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.img)
  return _internal_img();
}
inline ::BigPack::CCGiveImg* Exchange::unsafe_arena_release_img() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BigPack.Exchange.img)
  if (_internal_has_img()) {
    clear_has_dataBody();
    ::BigPack::CCGiveImg* temp = dataBody_.img_;
    dataBody_.img_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Exchange::unsafe_arena_set_allocated_img(::BigPack::CCGiveImg* img) {
  clear_dataBody();
  if (img) {
    set_has_img();
    dataBody_.img_ = img;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BigPack.Exchange.img)
}
inline ::BigPack::CCGiveImg* Exchange::_internal_mutable_img() {
  if (!_internal_has_img()) {
    clear_dataBody();
    set_has_img();
    dataBody_.img_ = CreateMaybeMessage< ::BigPack::CCGiveImg >(GetArena());
  }
  return dataBody_.img_;
}
inline ::BigPack::CCGiveImg* Exchange::mutable_img() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.img)
  return _internal_mutable_img();
}

// .BigPack.APTileReceived tileReceived = 13;
inline bool Exchange::_internal_has_tilereceived() const {
  return dataBody_case() == kTileReceived;
}
inline bool Exchange::has_tilereceived() const {
  return _internal_has_tilereceived();
}
inline void Exchange::set_has_tilereceived() {
  _oneof_case_[0] = kTileReceived;
}
inline void Exchange::clear_tilereceived() {
  if (_internal_has_tilereceived()) {
    if (GetArena() == nullptr) {
      delete dataBody_.tilereceived_;
    }
    clear_has_dataBody();
  }
}
inline ::BigPack::APTileReceived* Exchange::release_tilereceived() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.tileReceived)
  if (_internal_has_tilereceived()) {
    clear_has_dataBody();
      ::BigPack::APTileReceived* temp = dataBody_.tilereceived_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dataBody_.tilereceived_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BigPack::APTileReceived& Exchange::_internal_tilereceived() const {
  return _internal_has_tilereceived()
      ? *dataBody_.tilereceived_
      : reinterpret_cast< ::BigPack::APTileReceived&>(::BigPack::_APTileReceived_default_instance_);
}
inline const ::BigPack::APTileReceived& Exchange::tilereceived() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.tileReceived)
  return _internal_tilereceived();
}
inline ::BigPack::APTileReceived* Exchange::unsafe_arena_release_tilereceived() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BigPack.Exchange.tileReceived)
  if (_internal_has_tilereceived()) {
    clear_has_dataBody();
    ::BigPack::APTileReceived* temp = dataBody_.tilereceived_;
    dataBody_.tilereceived_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Exchange::unsafe_arena_set_allocated_tilereceived(::BigPack::APTileReceived* tilereceived) {
  clear_dataBody();
  if (tilereceived) {
    set_has_tilereceived();
    dataBody_.tilereceived_ = tilereceived;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BigPack.Exchange.tileReceived)
}
inline ::BigPack::APTileReceived* Exchange::_internal_mutable_tilereceived() {
  if (!_internal_has_tilereceived()) {
    clear_dataBody();
    set_has_tilereceived();
    dataBody_.tilereceived_ = CreateMaybeMessage< ::BigPack::APTileReceived >(GetArena());
  }
  return dataBody_.tilereceived_;
}
inline ::BigPack::APTileReceived* Exchange::mutable_tilereceived() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.tileReceived)
  return _internal_mutable_tilereceived();
}

// .BigPack.APMouseMove mouseMove = 14;
inline bool Exchange::_internal_has_mousemove() const {
  return dataBody_case() == kMouseMove;
}
inline bool Exchange::has_mousemove() const {
  return _internal_has_mousemove();
}
inline void Exchange::set_has_mousemove() {
  _oneof_case_[0] = kMouseMove;
}
inline void Exchange::clear_mousemove() {
  if (_internal_has_mousemove()) {
    if (GetArena() == nullptr) {
      delete dataBody_.mousemove_;
    }
    clear_has_dataBody();
  }
}
inline ::BigPack::APMouseMove* Exchange::release_mousemove() {
  // @@protoc_insertion_point(field_release:BigPack.Exchange.mouseMove)
  if (_internal_has_mousemove()) {
    clear_has_dataBody();
      ::BigPack::APMouseMove* temp = dataBody_.mousemove_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    dataBody_.mousemove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BigPack::APMouseMove& Exchange::_internal_mousemove() const {
  return _internal_has_mousemove()
      ? *dataBody_.mousemove_
      : reinterpret_cast< ::BigPack::APMouseMove&>(::BigPack::_APMouseMove_default_instance_);
}
inline const ::BigPack::APMouseMove& Exchange::mousemove() const {
  // @@protoc_insertion_point(field_get:BigPack.Exchange.mouseMove)
  return _internal_mousemove();
}
inline ::BigPack::APMouseMove* Exchange::unsafe_arena_release_mousemove() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BigPack.Exchange.mouseMove)
  if (_internal_has_mousemove()) {
    clear_has_dataBody();
    ::BigPack::APMouseMove* temp = dataBody_.mousemove_;
    dataBody_.mousemove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Exchange::unsafe_arena_set_allocated_mousemove(::BigPack::APMouseMove* mousemove) {
  clear_dataBody();
  if (mousemove) {
    set_has_mousemove();
    dataBody_.mousemove_ = mousemove;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BigPack.Exchange.mouseMove)
}
inline ::BigPack::APMouseMove* Exchange::_internal_mutable_mousemove() {
  if (!_internal_has_mousemove()) {
    clear_dataBody();
    set_has_mousemove();
    dataBody_.mousemove_ = CreateMaybeMessage< ::BigPack::APMouseMove >(GetArena());
  }
  return dataBody_.mousemove_;
}
inline ::BigPack::APMouseMove* Exchange::mutable_mousemove() {
  // @@protoc_insertion_point(field_mutable:BigPack.Exchange.mouseMove)
  return _internal_mutable_mousemove();
}

inline bool Exchange::has_dataBody() const {
  return dataBody_case() != DATABODY_NOT_SET;
}
inline void Exchange::clear_has_dataBody() {
  _oneof_case_[0] = DATABODY_NOT_SET;
}
inline Exchange::DataBodyCase Exchange::dataBody_case() const {
  return Exchange::DataBodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WMHeartbeat

// -------------------------------------------------------------------

// CsRegisterHost

// string cpuID = 1;
inline void CsRegisterHost::clear_cpuid() {
  cpuid_.ClearToEmpty();
}
inline const std::string& CsRegisterHost::cpuid() const {
  // @@protoc_insertion_point(field_get:BigPack.CsRegisterHost.cpuID)
  return _internal_cpuid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CsRegisterHost::set_cpuid(ArgT0&& arg0, ArgT... args) {
 
 cpuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.CsRegisterHost.cpuID)
}
inline std::string* CsRegisterHost::mutable_cpuid() {
  // @@protoc_insertion_point(field_mutable:BigPack.CsRegisterHost.cpuID)
  return _internal_mutable_cpuid();
}
inline const std::string& CsRegisterHost::_internal_cpuid() const {
  return cpuid_.Get();
}
inline void CsRegisterHost::_internal_set_cpuid(const std::string& value) {
  
  cpuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CsRegisterHost::_internal_mutable_cpuid() {
  
  return cpuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CsRegisterHost::release_cpuid() {
  // @@protoc_insertion_point(field_release:BigPack.CsRegisterHost.cpuID)
  return cpuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CsRegisterHost::set_allocated_cpuid(std::string* cpuid) {
  if (cpuid != nullptr) {
    
  } else {
    
  }
  cpuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.CsRegisterHost.cpuID)
}

// string deviceID = 2;
inline void CsRegisterHost::clear_deviceid() {
  deviceid_.ClearToEmpty();
}
inline const std::string& CsRegisterHost::deviceid() const {
  // @@protoc_insertion_point(field_get:BigPack.CsRegisterHost.deviceID)
  return _internal_deviceid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CsRegisterHost::set_deviceid(ArgT0&& arg0, ArgT... args) {
 
 deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.CsRegisterHost.deviceID)
}
inline std::string* CsRegisterHost::mutable_deviceid() {
  // @@protoc_insertion_point(field_mutable:BigPack.CsRegisterHost.deviceID)
  return _internal_mutable_deviceid();
}
inline const std::string& CsRegisterHost::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void CsRegisterHost::_internal_set_deviceid(const std::string& value) {
  
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CsRegisterHost::_internal_mutable_deviceid() {
  
  return deviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CsRegisterHost::release_deviceid() {
  // @@protoc_insertion_point(field_release:BigPack.CsRegisterHost.deviceID)
  return deviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CsRegisterHost::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.CsRegisterHost.deviceID)
}

// string mac = 3;
inline void CsRegisterHost::clear_mac() {
  mac_.ClearToEmpty();
}
inline const std::string& CsRegisterHost::mac() const {
  // @@protoc_insertion_point(field_get:BigPack.CsRegisterHost.mac)
  return _internal_mac();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CsRegisterHost::set_mac(ArgT0&& arg0, ArgT... args) {
 
 mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.CsRegisterHost.mac)
}
inline std::string* CsRegisterHost::mutable_mac() {
  // @@protoc_insertion_point(field_mutable:BigPack.CsRegisterHost.mac)
  return _internal_mutable_mac();
}
inline const std::string& CsRegisterHost::_internal_mac() const {
  return mac_.Get();
}
inline void CsRegisterHost::_internal_set_mac(const std::string& value) {
  
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CsRegisterHost::_internal_mutable_mac() {
  
  return mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CsRegisterHost::release_mac() {
  // @@protoc_insertion_point(field_release:BigPack.CsRegisterHost.mac)
  return mac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CsRegisterHost::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.CsRegisterHost.mac)
}

// string uniqueID = 4;
inline void CsRegisterHost::clear_uniqueid() {
  uniqueid_.ClearToEmpty();
}
inline const std::string& CsRegisterHost::uniqueid() const {
  // @@protoc_insertion_point(field_get:BigPack.CsRegisterHost.uniqueID)
  return _internal_uniqueid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CsRegisterHost::set_uniqueid(ArgT0&& arg0, ArgT... args) {
 
 uniqueid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.CsRegisterHost.uniqueID)
}
inline std::string* CsRegisterHost::mutable_uniqueid() {
  // @@protoc_insertion_point(field_mutable:BigPack.CsRegisterHost.uniqueID)
  return _internal_mutable_uniqueid();
}
inline const std::string& CsRegisterHost::_internal_uniqueid() const {
  return uniqueid_.Get();
}
inline void CsRegisterHost::_internal_set_uniqueid(const std::string& value) {
  
  uniqueid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CsRegisterHost::_internal_mutable_uniqueid() {
  
  return uniqueid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CsRegisterHost::release_uniqueid() {
  // @@protoc_insertion_point(field_release:BigPack.CsRegisterHost.uniqueID)
  return uniqueid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CsRegisterHost::set_allocated_uniqueid(std::string* uniqueid) {
  if (uniqueid != nullptr) {
    
  } else {
    
  }
  uniqueid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uniqueid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.CsRegisterHost.uniqueID)
}

// int32 type = 5;
inline void CsRegisterHost::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CsRegisterHost::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CsRegisterHost::type() const {
  // @@protoc_insertion_point(field_get:BigPack.CsRegisterHost.type)
  return _internal_type();
}
inline void CsRegisterHost::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CsRegisterHost::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:BigPack.CsRegisterHost.type)
}

// -------------------------------------------------------------------

// ScReplyRegister

// bool success = 1;
inline void ScReplyRegister::clear_success() {
  success_ = false;
}
inline bool ScReplyRegister::_internal_success() const {
  return success_;
}
inline bool ScReplyRegister::success() const {
  // @@protoc_insertion_point(field_get:BigPack.ScReplyRegister.success)
  return _internal_success();
}
inline void ScReplyRegister::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ScReplyRegister::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:BigPack.ScReplyRegister.success)
}

// string registerId = 2;
inline void ScReplyRegister::clear_registerid() {
  registerid_.ClearToEmpty();
}
inline const std::string& ScReplyRegister::registerid() const {
  // @@protoc_insertion_point(field_get:BigPack.ScReplyRegister.registerId)
  return _internal_registerid();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ScReplyRegister::set_registerid(ArgT0&& arg0, ArgT... args) {
 
 registerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.ScReplyRegister.registerId)
}
inline std::string* ScReplyRegister::mutable_registerid() {
  // @@protoc_insertion_point(field_mutable:BigPack.ScReplyRegister.registerId)
  return _internal_mutable_registerid();
}
inline const std::string& ScReplyRegister::_internal_registerid() const {
  return registerid_.Get();
}
inline void ScReplyRegister::_internal_set_registerid(const std::string& value) {
  
  registerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ScReplyRegister::_internal_mutable_registerid() {
  
  return registerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScReplyRegister::release_registerid() {
  // @@protoc_insertion_point(field_release:BigPack.ScReplyRegister.registerId)
  return registerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScReplyRegister::set_allocated_registerid(std::string* registerid) {
  if (registerid != nullptr) {
    
  } else {
    
  }
  registerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), registerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.ScReplyRegister.registerId)
}

// -------------------------------------------------------------------

// CsQueryHost

// -------------------------------------------------------------------

// ScReplyQuery

// bool ifExitHost = 1;
inline void ScReplyQuery::clear_ifexithost() {
  ifexithost_ = false;
}
inline bool ScReplyQuery::_internal_ifexithost() const {
  return ifexithost_;
}
inline bool ScReplyQuery::ifexithost() const {
  // @@protoc_insertion_point(field_get:BigPack.ScReplyQuery.ifExitHost)
  return _internal_ifexithost();
}
inline void ScReplyQuery::_internal_set_ifexithost(bool value) {
  
  ifexithost_ = value;
}
inline void ScReplyQuery::set_ifexithost(bool value) {
  _internal_set_ifexithost(value);
  // @@protoc_insertion_point(field_set:BigPack.ScReplyQuery.ifExitHost)
}

// string queryMessage = 2;
inline void ScReplyQuery::clear_querymessage() {
  querymessage_.ClearToEmpty();
}
inline const std::string& ScReplyQuery::querymessage() const {
  // @@protoc_insertion_point(field_get:BigPack.ScReplyQuery.queryMessage)
  return _internal_querymessage();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ScReplyQuery::set_querymessage(ArgT0&& arg0, ArgT... args) {
 
 querymessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.ScReplyQuery.queryMessage)
}
inline std::string* ScReplyQuery::mutable_querymessage() {
  // @@protoc_insertion_point(field_mutable:BigPack.ScReplyQuery.queryMessage)
  return _internal_mutable_querymessage();
}
inline const std::string& ScReplyQuery::_internal_querymessage() const {
  return querymessage_.Get();
}
inline void ScReplyQuery::_internal_set_querymessage(const std::string& value) {
  
  querymessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ScReplyQuery::_internal_mutable_querymessage() {
  
  return querymessage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScReplyQuery::release_querymessage() {
  // @@protoc_insertion_point(field_release:BigPack.ScReplyQuery.queryMessage)
  return querymessage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScReplyQuery::set_allocated_querymessage(std::string* querymessage) {
  if (querymessage != nullptr) {
    
  } else {
    
  }
  querymessage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), querymessage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.ScReplyQuery.queryMessage)
}

// -------------------------------------------------------------------

// CCRequestAuth

// string authPass = 1;
inline void CCRequestAuth::clear_authpass() {
  authpass_.ClearToEmpty();
}
inline const std::string& CCRequestAuth::authpass() const {
  // @@protoc_insertion_point(field_get:BigPack.CCRequestAuth.authPass)
  return _internal_authpass();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CCRequestAuth::set_authpass(ArgT0&& arg0, ArgT... args) {
 
 authpass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.CCRequestAuth.authPass)
}
inline std::string* CCRequestAuth::mutable_authpass() {
  // @@protoc_insertion_point(field_mutable:BigPack.CCRequestAuth.authPass)
  return _internal_mutable_authpass();
}
inline const std::string& CCRequestAuth::_internal_authpass() const {
  return authpass_.Get();
}
inline void CCRequestAuth::_internal_set_authpass(const std::string& value) {
  
  authpass_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CCRequestAuth::_internal_mutable_authpass() {
  
  return authpass_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCRequestAuth::release_authpass() {
  // @@protoc_insertion_point(field_release:BigPack.CCRequestAuth.authPass)
  return authpass_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCRequestAuth::set_allocated_authpass(std::string* authpass) {
  if (authpass != nullptr) {
    
  } else {
    
  }
  authpass_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authpass,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.CCRequestAuth.authPass)
}

// -------------------------------------------------------------------

// CCResponseAuth

// bool success = 1;
inline void CCResponseAuth::clear_success() {
  success_ = false;
}
inline bool CCResponseAuth::_internal_success() const {
  return success_;
}
inline bool CCResponseAuth::success() const {
  // @@protoc_insertion_point(field_get:BigPack.CCResponseAuth.success)
  return _internal_success();
}
inline void CCResponseAuth::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void CCResponseAuth::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:BigPack.CCResponseAuth.success)
}

// string info = 2;
inline void CCResponseAuth::clear_info() {
  info_.ClearToEmpty();
}
inline const std::string& CCResponseAuth::info() const {
  // @@protoc_insertion_point(field_get:BigPack.CCResponseAuth.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CCResponseAuth::set_info(ArgT0&& arg0, ArgT... args) {
 
 info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.CCResponseAuth.info)
}
inline std::string* CCResponseAuth::mutable_info() {
  // @@protoc_insertion_point(field_mutable:BigPack.CCResponseAuth.info)
  return _internal_mutable_info();
}
inline const std::string& CCResponseAuth::_internal_info() const {
  return info_.Get();
}
inline void CCResponseAuth::_internal_set_info(const std::string& value) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CCResponseAuth::_internal_mutable_info() {
  
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCResponseAuth::release_info() {
  // @@protoc_insertion_point(field_release:BigPack.CCResponseAuth.info)
  return info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCResponseAuth::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.CCResponseAuth.info)
}

// -------------------------------------------------------------------

// CCGetDesktop

// -------------------------------------------------------------------

// CCGiveImgParameters

// int32 width = 1;
inline void CCGiveImgParameters::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCGiveImgParameters::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCGiveImgParameters::width() const {
  // @@protoc_insertion_point(field_get:BigPack.CCGiveImgParameters.width)
  return _internal_width();
}
inline void CCGiveImgParameters::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void CCGiveImgParameters::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:BigPack.CCGiveImgParameters.width)
}

// int32 height = 2;
inline void CCGiveImgParameters::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCGiveImgParameters::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCGiveImgParameters::height() const {
  // @@protoc_insertion_point(field_get:BigPack.CCGiveImgParameters.height)
  return _internal_height();
}
inline void CCGiveImgParameters::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void CCGiveImgParameters::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:BigPack.CCGiveImgParameters.height)
}

// int32 rectWidth = 3;
inline void CCGiveImgParameters::clear_rectwidth() {
  rectwidth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCGiveImgParameters::_internal_rectwidth() const {
  return rectwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCGiveImgParameters::rectwidth() const {
  // @@protoc_insertion_point(field_get:BigPack.CCGiveImgParameters.rectWidth)
  return _internal_rectwidth();
}
inline void CCGiveImgParameters::_internal_set_rectwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rectwidth_ = value;
}
inline void CCGiveImgParameters::set_rectwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rectwidth(value);
  // @@protoc_insertion_point(field_set:BigPack.CCGiveImgParameters.rectWidth)
}

// -------------------------------------------------------------------

// CCGiveImg

// int32 posX = 1;
inline void CCGiveImg::clear_posx() {
  posx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCGiveImg::_internal_posx() const {
  return posx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCGiveImg::posx() const {
  // @@protoc_insertion_point(field_get:BigPack.CCGiveImg.posX)
  return _internal_posx();
}
inline void CCGiveImg::_internal_set_posx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  posx_ = value;
}
inline void CCGiveImg::set_posx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:BigPack.CCGiveImg.posX)
}

// int32 posY = 2;
inline void CCGiveImg::clear_posy() {
  posy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCGiveImg::_internal_posy() const {
  return posy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCGiveImg::posy() const {
  // @@protoc_insertion_point(field_get:BigPack.CCGiveImg.posY)
  return _internal_posy();
}
inline void CCGiveImg::_internal_set_posy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  posy_ = value;
}
inline void CCGiveImg::set_posy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:BigPack.CCGiveImg.posY)
}

// int32 tileNum = 3;
inline void CCGiveImg::clear_tilenum() {
  tilenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCGiveImg::_internal_tilenum() const {
  return tilenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCGiveImg::tilenum() const {
  // @@protoc_insertion_point(field_get:BigPack.CCGiveImg.tileNum)
  return _internal_tilenum();
}
inline void CCGiveImg::_internal_set_tilenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tilenum_ = value;
}
inline void CCGiveImg::set_tilenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tilenum(value);
  // @@protoc_insertion_point(field_set:BigPack.CCGiveImg.tileNum)
}

// bytes imgData = 4;
inline void CCGiveImg::clear_imgdata() {
  imgdata_.ClearToEmpty();
}
inline const std::string& CCGiveImg::imgdata() const {
  // @@protoc_insertion_point(field_get:BigPack.CCGiveImg.imgData)
  return _internal_imgdata();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CCGiveImg::set_imgdata(ArgT0&& arg0, ArgT... args) {
 
 imgdata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BigPack.CCGiveImg.imgData)
}
inline std::string* CCGiveImg::mutable_imgdata() {
  // @@protoc_insertion_point(field_mutable:BigPack.CCGiveImg.imgData)
  return _internal_mutable_imgdata();
}
inline const std::string& CCGiveImg::_internal_imgdata() const {
  return imgdata_.Get();
}
inline void CCGiveImg::_internal_set_imgdata(const std::string& value) {
  
  imgdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CCGiveImg::_internal_mutable_imgdata() {
  
  return imgdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCGiveImg::release_imgdata() {
  // @@protoc_insertion_point(field_release:BigPack.CCGiveImg.imgData)
  return imgdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCGiveImg::set_allocated_imgdata(std::string* imgdata) {
  if (imgdata != nullptr) {
    
  } else {
    
  }
  imgdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imgdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BigPack.CCGiveImg.imgData)
}

// -------------------------------------------------------------------

// APTileReceived

// int32 tileNum = 1;
inline void APTileReceived::clear_tilenum() {
  tilenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 APTileReceived::_internal_tilenum() const {
  return tilenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 APTileReceived::tilenum() const {
  // @@protoc_insertion_point(field_get:BigPack.APTileReceived.tileNum)
  return _internal_tilenum();
}
inline void APTileReceived::_internal_set_tilenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tilenum_ = value;
}
inline void APTileReceived::set_tilenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tilenum(value);
  // @@protoc_insertion_point(field_set:BigPack.APTileReceived.tileNum)
}

// -------------------------------------------------------------------

// APMouseMove

// int32 pointX = 1;
inline void APMouseMove::clear_pointx() {
  pointx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 APMouseMove::_internal_pointx() const {
  return pointx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 APMouseMove::pointx() const {
  // @@protoc_insertion_point(field_get:BigPack.APMouseMove.pointX)
  return _internal_pointx();
}
inline void APMouseMove::_internal_set_pointx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pointx_ = value;
}
inline void APMouseMove::set_pointx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pointx(value);
  // @@protoc_insertion_point(field_set:BigPack.APMouseMove.pointX)
}

// int32 pointY = 2;
inline void APMouseMove::clear_pointy() {
  pointy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 APMouseMove::_internal_pointy() const {
  return pointy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 APMouseMove::pointy() const {
  // @@protoc_insertion_point(field_get:BigPack.APMouseMove.pointY)
  return _internal_pointy();
}
inline void APMouseMove::_internal_set_pointy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pointy_ = value;
}
inline void APMouseMove::set_pointy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pointy(value);
  // @@protoc_insertion_point(field_set:BigPack.APMouseMove.pointY)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BigPack

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BigPack::Exchange_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BigPack::Exchange_DataType>() {
  return ::BigPack::Exchange_DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Exchange_2eproto
